[{"categories":["Tutoriales"],"contents":" En esta pequeña publicación vamos a definir y entender que es una aplicación web progresiva.\nEmpecemos hablando de los beneficios de crear una página web sobre una aplicación nativa.\n Son linkeables, eso quiere decir que te puedes mover entre páginas con un simple y sencillo link. Son indexables, aquí hacemos referencia el hecho de que uno puede navegar y buscar entre páginas de manera simple a diferencia de las aplicaciones nativas. Tambien son multiplataforma, una página web corre en cualquier navegador sin la necesidad de que modifiquemos el código Y por ultimo son fáciles de actualizar ha diferencia de las aplicaciones nativas donde hay un proceso más lento de modificaciones a través de las tiendas.  Por otro lado las aplicaciones nativas aventajan a las páginas web en lo siguiente:\n Pueden funcionar con o sin internet, ahí frente a diferencia las páginas web que requiere una conexión de internet pues para acceder a la página. Tienen acceso al hardware el dispositivo, cosas como la cámara el GPS los micrófonos y otras cosas. Tienen carga inmediata el proceso del rénder una aplicación nativa es más rápido porque lo que necesitan para mostrar la vista inicial ya se encuentra en el dispositivo a diferencia de las páginas web que tienen que descargar el contenido de un servidor remoto. Push notifications, las aplicaciones nativas reciben una notificaciónes push que tienen un montón de beneficios que nos vamos a ir de discutir en esta ocasión.  Ahora bien las aplicaciones web progresivas como te habrás imaginado busca en combinar lo mejor de ambos mundos, cumplen con las características de una página web pues porque prácticamente son una página web, además cumplen con muchas de las caracteristicas que destacan a una aplicación nativa, reciben push notifications, funcionan offline, tienen acceso al hardware vía las APIS de HTML5 y cargan de inmediato.\nLa pregunta ahora es como lo hacen que hace, que hace una aplicación web progresiva distinta de a una página web y que las hace diferentes de una aplicación nativa, empecemos por lo más sencillo, una aplicación web progresiva se diferencia de una app nativa en múltiples aspectos:\n Se escribe con tecnologías web estándar como HTML, CSS y javascript. No se instala en vías tiendas propietarias como la Play Store o al AppStore. No usa código nativo como JAVA o SWIFT, en pocas palabras no funciona como una aplicación nativa, simplemente no es una, no tiene acceso a las mismas Apis ni al mismo hardware.  Diferenciarlas de una página web tradicional requiere de un poquito mas de detalle porque vamos a decir que una aplicación web progresiva es un tipo de página web, una página web con capacidades añadidas, veamos cuáles son estas capacidades extras como se agreguen y por qué lo hacemos.\n1. Offline Las aplicaciones web progresivas tienen acceso sin internet, tradicionalmente sabemos que necesitamos internet para poder acceder a una página web, en términos sencillos para que podamos visitar una página el navegador envía una petición al servidor en el que ésta se aloja, ese servidor puede encontrarse en cualquier parte del mundo y es precisamente vía el internet que buscamos y nos conectamos con dicho servidor, una aplicación web progresivo utilice una tecnología de nombre service workers que actúa como un pequeño servidor dentro del navegador que permite mostrar páginas aunque no halla internet o estemos usando una conexión lenta, para poder hacer esto el navegador implementa un cache propio donde podemos guardar los archivos que no cambian dentro de nuestra página para que sea este el servidor interno el que los envié desde el caché local en lugar de tener que ir hasta el servidor remoto, el beneficio de esto es que cuando no existe conexión a internet es la service worker la que se encarga de entregar el contenido que tiene guardado. - Instalación local, vía un archivo de configuración al que llamamos manifesto el navegador sabe que tu APP se puede agregar a la pantalla principal de un teléfono. haciendo que tu aplicación web se muestren prácticamente como una aplicación nativa.\nLos navegadores que soportan esta funcionalidad muestran un banner en la parte inferior de la pantalla para hacer saber al usuario que la página se puede agregar al home de su teléfono, el proceso de \u0026ldquo;instalación local\u0026rdquo; implica agregar un icono al home pero además algo que mencionamos antes, guarda parte de la página del caché para mostrarlo desde el navegador en lugar de descargarlo del servidor remoto.\n2. Carga inmediata Como parte de la creación de aplicaciones web progresivas introduce el concepto de APP Shell, el Shell de tu aplicación es aquello que se debe mostrar inicialmente, es como el Layout de la estructura que rodea tu contenido.\nEl Shell debe ser estático y puede incluir cosas como el encabezado, el menú y probablemente un indicador de que la aplicación se está cargando, la ventaja de definir esta sección de tu página es optimizarlo para que se muestre de inmediato, eso podría significar construir el app shell desde el servidor, cachearlo con service workers y servirlos sin la necesidad de esperar una respuesta del servidor remoto.\n3. Notificaciones push Una de las características de las notificaciones push es que se ejecutan sin ninguna acción del usuario, vienen de algún lado, incluso cuando la app ni siquiera está abierta, no quiero que andemos mucho en por qué es complicado en el desarrollo web tradicional hacer esto pero lo es, básicamente en la mayoría en los casos el cliente sabe acerca del servidor pero el servidor no sabe nada acerca del cliente, no sabe dónde está, de manera que él servidor no podría enviarle push notifications, por otro lado usualmente entendemos que una página se muere, se acaba por completo cuando cerramos las pestañas, entonces cómo podríamos hacer esto, resulta ser que la service worker es una tecnologías que se ejecutan en el background, lo que permite introducir nuevas tecnologías para notificaciones push o actualizaciones en el background incluso cuando la página está cerrada cosas que no se podían hacer antes.\n4. Hardware Desde hace ya varios años los navegadores no son lo que parece, tienen capacidades extendidas que les permiten acceder a hardware del usuario, la Apis son un montón y muy diversas desde acceso a la cámara, acceso al GPS, sensores de iluminación, almacenamiento local, bases de datos internas y muchas más.\n5. Diseño responsive No lo había mencionado antes pero una parte esencial de crear una aplicación web progresivo es que funcione en cualquier dispositivo, desde teléfonos hasta un reloj inteligente. Esta necesidad implica por un lado aprender diseño responsiva pero además estrategias de experiencia de usuario que se adapten a los cambios en el tamaño de cada una de las pantallas, aquí podemos apoyarnos de cosas como material desing, que es la guía de diseño que Google creó para aplicar a sus productos, material desing es un tema que incluye colores, grillas y componentes pero además algo muy importante animaciones y transiciones que forman parte de la experiencia con la que el usuario navega dentro de tu aplicación.\nEn conclusión, podemos ver que las aplicaciones web progresivas hacen uso de múltiples tecnologías para poder ofrecer la experiencia de una app nativa sin perder los beneficios de ser una aplicación web. Progressive web app es más acerca de una experiencia que de una herramienta, un lenguaje o un framework, por lo tanto a pesar de de que es fácil enlazar una serie de tecnologías como la service Workers construir una aplicación web progresiva es más bien utilizar las herramientas existentes de manera creativa para poder ofrecer una experiencia enriquecida para nuestros usuarios.\nComenta, disfruta y comparte! ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-07-21-appwebprogresiva-que-es/","tags":["nodejs","mongodb","JS"],"title":"¿Que son las aplicaciones web progresivas?"},{"categories":["Tutoriales"],"contents":" En este pequeño post te explicaré como crear una aplicación de chat en tiempo real paso a paso. Para entender todo este proceso se requiere que tengas conocimientos en nodeJS, mongoDB, javascript, html5 y css3.\nInstalando paquetes y configuración Lo primero que tenemos que hacer es crear un directorio en donde estarán todos nuestros archivos, puedes utilizar el editor de código que mas se adecue a tí. En mi caso usaré VSCode.\nEn la consola ejecutamos la siguiente linea: npm init esto quiere decir que estamos iniciando el directorio como una aplicación nodeJS. Se te pedirá que completes algo de información. Esta se utilizará para configurar el archivo package.json.\nUtilizaremos express para crear nuestro servidor web que alojará nuestros archivos estáticos y body-parser para extraer todo el cuerpo de una solicitud entrante.\nnpm install express body-parser --save  A continuación, instalamos mongoose, esto es un ODM (Object Document Mapper) para MongoDB y hará que nuestro trabajo sea mucho más fácil. Vamos a instalarlo junto a socket.io y bluebird. Para tener algo de contexto de estas dos ultimas; Socket.io es una biblioteca de javascript para aplicaciones web en tiempo real. Bluebird es una biblioteca Promise con todas las funciones para javascript.\nnpm install mongoose socket.io bluebird --save   Puedes instalar nodemon para no estar iniciando el servidor con cualquier modificación que hagamos, esto es opcional. npm install nodemon\n Este será nuestro árbol de archivos para esta app.\n. ├── client | ├── css | | └── style.css | ├── js | | ├── chat.js | | ├── fortmatTimeStamp.js | | └── socket.io | └── index.html ├── server | ├── controllers | | └── chat.js | ├── mongoDB | | ├── chatSchema.js | | └── dbconnection.js | └── routes | └── chat.js ├── app.js └── package.json  Creando el lado cliente \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;es\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Chat\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;./css/style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row justify-content-md-center mt-3\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-7\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-header\u0026quot;\u0026gt; \u0026lt;h4 class=\u0026quot;text-center\u0026quot;\u0026gt;CHAT\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;chat\u0026quot; id=\u0026quot;listaMensajes\u0026quot;\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-footer\u0026quot;\u0026gt; \u0026lt;small id=\u0026quot;escribiendo\u0026quot;\u0026gt;\u0026amp;nbsp;\u0026lt;/small\u0026gt; \u0026lt;form id=\u0026quot;form\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;input id=\u0026quot;mensaje\u0026quot; type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;Escribe tu mensaje aquí...\u0026quot; autocomplete=\u0026quot;off\u0026quot; /\u0026gt; \u0026lt;span class=\u0026quot;input-group-append\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-warning\u0026quot; id=\u0026quot;btn-chat\u0026quot;\u0026gt;Enviar\u0026lt;/button\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;./js/formatTimeStamp.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;./js/socket.io.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;./js/chat.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Este será nuestro archivo HTML que servirá para la interfaz, para instanciar socket.io en el cliente, puedes obtener el código haciendo click aquí.\n formatTimeStamp.js nos servirá para obtener el momento en que se envio el mensaje, si fue hoy, ayer o la semana pasada. Puedes obtener el código dando click aquí.\n Antes de configurar el archivo chat.js debemos de centrarnos en el desarrollo del backend.\nCreando el lado servidor Empezaremos creando la conexión con mongoDB, para ello crearemos dos archivos dentro de ./server/mongoDB/.\nEl primero lo llamaremos chatSchema.js, aquí crearemos un esquema de la colección que se creará. Solo tendremos 3 campos en nuestro esquema:\n un campo de mensaje un campo de remitente una marca de tiempo.\nconst mongoose = require(\u0026quot;mongoose\u0026quot;); const Schema = mongoose.Schema; const chatSchema = new Schema({ message: { type: String }, sender: { type: String } }, { timestamps: true }); let Chat = mongoose.model(\u0026quot;chats\u0026quot;, chatSchema); module.exports = Chat;   Luego creamos el archivo dbconnection.js, aquí tendremos la conexión con mongoDB a partir del esquema creado y tambien veremos como implementamos bluebird.js.\nconst mongoose = require(\u0026quot;mongoose\u0026quot;); mongoose.Promise = require(\u0026quot;bluebird\u0026quot;); const url = \u0026quot;localhost:1111/test\u0026quot;; //conexion mongo const connect = mongoose.connect(url, { useNewUrlParser: true }); module.exports = connect;  Luego de haber realizado la conexión, crearemos el controlador, para ellos creamos un archivo dentro de ./server/controller/, este archivo tendrá el nombre de chat.js. En este archivo referenciaremos la conexión y el esquema de mongo para realizar lo siguiente:\n\u0026quot;use strict\u0026quot;; const connectdb = require(\u0026quot;../mongoDB/dbconnection\u0026quot;); const chat = require(\u0026quot;../mongoDB/chatSchema\u0026quot;); exports.obtener = ((req, res, nect) =\u0026gt; { res.setHeader(\u0026quot;Content-Type\u0026quot;, \u0026quot;application/json\u0026quot;); res.statusCode = 200; connectdb.then(db =\u0026gt; { chat.find({}).then(chat =\u0026gt;{ res.json(chat); }); }); });  Este controlador nos permitirá obtener un listado de todos los chats que se han registrado en mongoDB.\nEstamos a pocos pasos de terminar, ahora solo queda crear la ruta y configurar todo dentro del archivo app.js. Para realizar el routeo del controlador debemos de crear un archivo dentro de ./server/routes/ al cual llamaremos chat.js, realizamos lo siguiente:\nconst express = require(\u0026quot;express\u0026quot;); const controller = require(\u0026quot;../controllers/chat\u0026quot;); const router = express.Router(); router.route(\u0026quot;/\u0026quot;).get(controller.obtener); module.exports = router;  Configurando app.js Empezaremos creando las referencias hacia los paquetes npm y los archivos creados asi como tambien el puerto donde se desplegará.\nconst port = 2705; const express = require(\u0026quot;express\u0026quot;); const app = express(); const bodyParser = require(\u0026quot;body-parser\u0026quot;); const http = require(\u0026quot;http\u0026quot;).Server(app); const io = require(\u0026quot;socket.io\u0026quot;); const socket = io(http); const chatRouter = require(\u0026quot;./server/routes/chat\u0026quot;); const chatSchema = require(\u0026quot;./server/mongoDB/chatSchema\u0026quot;); const connectDB = require(\u0026quot;./server/mongoDB/dbconnection\u0026quot;);  Luego configuramos las rutas, ademas de eso configuramos bodyParser y una ruta estatica para mostrar el lado cliente\napp.use(bodyParser.json()); app.use(\u0026quot;/chat\u0026quot;, chatRouter); app.use(express.static(`${__dirname}/client`));  Ahora viene lo bueno, configuraremos socket.io para los siguientes eventos:\n usuario conectado usuario desconectado escribiendo dejar de escribir mensaje enviado  Empezaremos por el evento usuario conectado, este evento sera el contenedor de los demas eventos, basicamente funcionará como un change stream. De paso tambien configuramos el evento de usuario desconectado.\nsocket.on(\u0026quot;connection\u0026quot;, (socket) =\u0026gt; { console.log(\u0026quot;usuario conectado\u0026quot;); socket.on(\u0026quot;disconnect\u0026quot;, () =\u0026gt; { console.log(\u0026quot;usuario desconectado\u0026quot;); }); // aquí va evento escribiendo // aquí va evento dejar de escribir // aquí va mensaje enviado });   Si un nuevo usuario visita localhost:2705, se imprimirá el mensaje \u0026ldquo;usuario conectado\u0026rdquo; en la consola. Socket.on() toma un nombre de evento y una devolución de llamada como parámetros.\n Ahora nos toca configurar la parte de escribir y dejar de escribir, esto es como un adicional, es muy sencillo implementarlo, hay que tener en cuenta que esto va dentro del evento \u0026ldquo;connection\u0026rdquo; del código anterior.\nsocket.on(\u0026quot;typing\u0026quot;, data =\u0026gt; { socket.broadcast.emit(\u0026quot;notifyTyping\u0026quot;, { user: data.user, message: data.message }); }); socket.on(\u0026quot;stopTyping\u0026quot;, () =\u0026gt; { socket.broadcast.emit(\u0026quot;notifyStopTyping\u0026quot;); });  Y por ultimo configuramos el evento principal, el que escuchará los mensajes y lo registrará en la base de datos.\nsocket.on(\u0026quot;chat message\u0026quot;, (msg) =\u0026gt; { console.log(`message: ${msg}`); socket.broadcast.emit(\u0026quot;received\u0026quot;, { message: msg }); connectDB.then(db =\u0026gt; { let mensaje = new chatSchema({ message: msg, sender: \u0026quot;Anónimo\u0026quot; }); mensaje.save(); }); });  Dentro de este evento, podemos elegir lo que hacemos con el mensaje del cliente: insertarlo en la base de datos, enviarlo de vuelta al cliente, etc. En nuestro caso, lo guardaremos en la base de datos y también lo enviaremos al cliente.\nLo transmitiremos. Eso significa que el servidor lo enviará a todas las demás personas conectadas al servidor, aparte del remitente. Por lo tanto, si el Sr. A envía el mensaje al servidor y el servidor lo transmite, el Sr. B, C, D, etc. lo recibirá, pero el Sr. A no lo hará. No queremos recibir un mensaje que enviamos, ¿verdad? 😭\nEso no significa que no podamos recibir un mensaje que también enviamos. Si eliminamos la bandera de transmisión, también eliminaremos el mensaje.\nAquí es cómo se transmite un evento:\nsocket.broadcast.emit(\u0026quot;received\u0026quot;, { message: msg });  Y como un paso adicional pero muy importante es poner a escuchar nuestro servidor:\nhttp.listen(port, () =\u0026gt; { console.log(`Corriendo en el puerto ${port}`); });  Configuración del archivo chat.js Este archivo es parte del cliente, el que esta referenciado en el html, esto enviará y escuchará los eventos del servidor.\n\u0026quot;use strict\u0026quot;; const _SOCKET = io(); const chat = (() =\u0026gt; { const _elementos = { mensajes: $(\u0026quot;#listaMensajes\u0026quot;), escribiendo: $(\u0026quot;#escribiendo\u0026quot;), inputMensaje: $(\u0026quot;#mensaje\u0026quot;) } const _utils = { crearHTML: ((mensaje, fecha) =\u0026gt; { return ` \u0026lt;li class=\u0026quot;left clearfix\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;chat-body clearfix\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;header\u0026quot;\u0026gt; \u0026lt;strong class=\u0026quot;primary-font\u0026quot;\u0026gt;Anónimo\u0026lt;/strong\u0026gt; \u0026lt;small class=\u0026quot;pull-right text-muted\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;glyphicon glyphicon-time\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;${fecha} \u0026lt;/small\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;${mensaje}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt;`; }), scroolListaMensajes: (() =\u0026gt; { $(\u0026quot;.card-body\u0026quot;).animate({ scrollTop: $(this).height() }, \u0026quot;slow\u0026quot;); }) } const _eventos = { enviarMensaje: (() =\u0026gt; { $(\u0026quot;form\u0026quot;).submit((e) =\u0026gt; { e.preventDefault(); if (!_elementos.inputMensaje.val() ||_elementos.inputMensaje.val() === \u0026quot;\u0026quot;) return false; _SOCKET.emit(\u0026quot;chat message\u0026quot;, _elementos.inputMensaje.val()); let html = _utils.crearHTML(_elementos.inputMensaje.val(), \u0026quot;justo ahora\u0026quot;); _elementos.mensajes.append(html); _elementos.inputMensaje.val(\u0026quot;\u0026quot;); _utils.scroolListaMensajes(); return false; }); }), obtenerMensaje: (() =\u0026gt; { _SOCKET.on(\u0026quot;received\u0026quot;, data =\u0026gt; { let html = _utils.crearHTML(data.message, \u0026quot;justo ahora\u0026quot;); _elementos.mensajes.append(html); _utils.scroolListaMensajes(); }); }), cargarMensajes: (() =\u0026gt; { fetch(\u0026quot;/chat\u0026quot;).then(data =\u0026gt; { return data.json(); }).then(json =\u0026gt; { json.map(data =\u0026gt; { let html = _utils.crearHTML(data.message, formatTimeAgo(data.createdAt)); _elementos.mensajes.append(html); }); _utils.scroolListaMensajes(); }); }), detectarEscribir: (() =\u0026gt; { _elementos.inputMensaje.on(\u0026quot;keypress\u0026quot;, () =\u0026gt; { _SOCKET.emit(\u0026quot;typing\u0026quot;, { user: \u0026quot;Someone\u0026quot;, message: \u0026quot;is typing...\u0026quot; }); }); _SOCKET.on(\u0026quot;notifyTyping\u0026quot;, data =\u0026gt; { _elementos.escribiendo.html(data.user + \u0026quot; \u0026quot; + data.message); }); }), detectarDejarEscribir: (() =\u0026gt; { _elementos.inputMensaje.on(\u0026quot;keyup\u0026quot;, () =\u0026gt; { _SOCKET.emit(\u0026quot;stopTyping\u0026quot;, \u0026quot;\u0026quot;); }); _SOCKET.on(\u0026quot;notifyStopTyping\u0026quot;, () =\u0026gt; { _elementos.escribiendo.html(\u0026quot;\u0026amp;nbsp;\u0026quot;); }) }) } const inicializar = (() =\u0026gt; { _eventos.enviarMensaje(); _eventos.obtenerMensaje(); _eventos.cargarMensajes(); _eventos.detectarEscribir(); _eventos.detectarDejarEscribir(); }); return { inicializar: inicializar } })(); (() =\u0026gt; { chat.inicializar(); })();  El código es muy fácil de entender.\nPuedes mejorar este código, agregar autenticación, agregar grupos o convertirlo en un chat individual, volver a modelar el esquema para adaptarse a todo eso, etc.\nEspero que esto te haya sido útil. El código completo está en Github. Puedes conseguirlo aquí.\nComenta, disfruta y comparte! ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-06-30-app-chat-express-socket.io-mongodb-bluebird/","tags":["nodejs","mongodb","JS"],"title":"CHAT en tiempo real con NodeJS, Express, BlueBirdJS, Socket.IO y mongoDB"},{"categories":["Tutoriales"],"contents":"  Ngrok es una herramienta útil que crea una URL de túnel segura y de acceso público a una aplicación que se ejecuta en localhost.\n Hace algunos meses atrás quería publicar un servicio hecho en nodeJS para que su consumo sea de una red diferente a la del trabajo, y como sucede en todos los centros laborales hay mucha burocracia. Asi que investigando me tope con dos herramientas muy utíles: ngrok y localtunel.\nNgrok y Localtunel son dos aplicaciones que permiten exponer servidores locales a URLS de acceso público, que admiten HTTP y HTTPS. Realice las pruebas con ambas herramientas pero ngrok es mas estable que localtunel.\nInstalación de ngrok Hay una ruta fácil documentada en la página “Comenzar” de ngrok. Deberá registrarse, tomar su identificador de autenticación y luego escribir algunos comandos en su terminal de elección. ¡Es extremadamente fácil!\nUna vez que todo está configurado, en su terminal deberá de ejecutar el siguiente comando:\nngrok http 1313  Escupirá algo como esto en tu terminal.\nngrok by @inconshreveable (Ctrl+C to quit) Session Status online Account Jesse Horne (Plan: Free) Version 2.3.29 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://dc8fa43a.ngrok.io -\u0026gt; localhost:1313 Forwarding https://dc8fa43a.ngrok.io -\u0026gt; localhost:1313 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00  Como puede ver, especifiqué que el servidor local se está ejecutando en el puerto 1313. Se puede cambiar a cualquier puerto que esté usando su servidor.\nFácil verdad? La URL de HTTP y HTTPS se imprime, como puede ver. Puede usar la interfaz web (http://127.0.0.1:4040) de ngroks para monitorear el estado de su aplicación y proporciona otras características útiles. Puede encontrar más información sobre eso y más en la documentación (https://ngrok.com/docs).\nLe motivo a que lo revise y vea cómo la herramienta puede beneficiar su flujo de trabajo. Doy la bienvenida a cualquier comentario y aprecio su tiempo, lector!\nComenta, disfruta y comparte! ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-06-10-ngrok/","tags":["tuneles"],"title":"NGrok: Crea URLs públicas para exponer su servidor web local"},{"categories":["base de datos"],"contents":" MongoDB Atlas es la base de datos como servicio que permite implementar, utilizar y escalar una base de datos de MongoDB en la nube haciendo conexión con NodeJS.\nUsaremos clases y funcion asincronas con promesas en javascript ES6.\nCreando el Package.json Antes de proceder con cualquier instalación de paquetes npm necesitamos crear nuestro package.json.\n Como primer paso creamos una carpeta donde estarán todos nuestros archivos. Luego, levantar la ventana de comandos dentro de la carpeta y ejecutar el siguiente comando npm init. Podemos personalizar o simplemente precionar la tecla enter hasta terminar.  Al finalizar tendremos un archivo como este:\n{ \u0026quot;name\u0026quot;: \u0026quot;[nombre]\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;[versión]\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;[descripción]\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot; }, \u0026quot;author\u0026quot;: \u0026quot;Hugo Roca - hugo.rock20@hotmail.com\u0026quot;, \u0026quot;license\u0026quot;: \u0026quot;[licencia]\u0026quot; }  Instalando npm mongodb Para este caso utilizaremos al paquete mongodb (https://www.npmjs.com/package/mongodb), en la consola de comandos copiamos y pegamos lo siquiente: npm i mongodb, una ves terminado se creará una carpeta por defecto node_modules, en donde se guardan todas las dependencias.\nCreando colección Podemos crear la colección tanto por una GUI para mongo como por código. Dejare un ejemplo de como crearlo por código.\nlet MongoClient = require('mongodb').MongoClient; let url = \u0026quot;mongodb://localhost:27017/\u0026quot;; // =\u0026gt; url de conexión mongo MongoClient.connect(url, function(err, db) { if (err) throw err; let dbo = db.db(\u0026quot;mydb\u0026quot;); dbo.createCollection(\u0026quot;customers\u0026quot;, function(err, res) { if (err) throw err; console.log(\u0026quot;Collection created!\u0026quot;); db.close(); }); }); /* esto es un ejemplo básico */  Creando el proyecto Empezaremos creando un archivo config.js, en donde se alojaran las configuraciones, conexiones, etc.\nconst config = { mongo: { url: \u0026quot;mongodb://localhost:27017/\u0026quot;, // =\u0026gt; url de conexión mongo database: \u0026quot;test\u0026quot;, collection: \u0026quot;nodejs_mongo_atlas\u0026quot; } } module.exports = config;  Creamos otro archivo y lo nombraremos mongoUtils.js, este archivo tendrá funciones de configuración.\nconst mongoClient = require(\u0026quot;mongodb\u0026quot;).MongoClient; const config = require(\u0026quot;./config\u0026quot;); module.exports = class MongoUtils { getConnectionString() { return config.mongo.url; } getDataBaseString() { return config.mongo.database; } getCollectionString() { return config.mongo.collection; } buildCollection(message) { return { message, createdAt: new Date() } } async insertData(data) { return new Promise((resolve, reject) =\u0026gt; { mongoClient.connect(this.getConnectionString(), { useNewUrlParser: true }).then(client =\u0026gt; { const db = client.db(this.getDataBaseString()); const collection = db.collection(this.getCollectionString()); collection.insertOne(data, (insertError, insertResponse) =\u0026gt; { if (insertError) reject(insertError); resolve(insertResponse); }); }).catch(err =\u0026gt; { console.error(\u0026quot;Error al conectarse con la base de datos: \u0026quot;, err); }); }); } async insert(message){ let data = this.buildCollection(message); return await this.insertData(data); } }  Para finalizar, creamos un archivo index.js en donde haremos el llamado a la funciones creadas en mongoUtils.js.\nconst mongoUtils = require(\u0026quot;./mongoUtils\u0026quot;); const mongo = new mongoUtils(); (async() =\u0026gt; { let insert = await mongo.insert(\u0026quot;Ejecutando mongo desde nodeJS\u0026quot;); console.log(insert); })();  Para ejecutar, solamente basta ejecutar el siguiente comando en la consola node index.js\n Para obtener el código completo dar click aquí\nComenta, disfruta y comparte!  ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-05-13-nodejs-mongodb/","tags":["JS","mongodb"],"title":"Conexión NodeJS con MongoDB Atlas"},{"categories":["base de datos"],"contents":" MongoDB Atlas ofrece la base de datos líder mundial para aplicaciones modernas como un servicio en la nube totalmente automatizado, diseñado y ejecutado por el mismo equipo que construye la base de datos.\nAntes de empezar la configuración debemos de entender que es MongoDB Atlas, que ventajas y caracteristicas nos ofrece a comparación de tenerlo en modo local.\n MongoDB Atlas es la base de datos como servicio que permite implementar, utilizar y escalar una base de datos de MongoDB con tan solo unos pocos clics.\n Las caracteristicas que ofrece MongoDb Atlas son:\n Automatización: la manera más fácil de crear, lanzar y escalar aplicaciones en MongoDB. Flexibilidad: La única base de datos como servicio con tofo lo necesario para las aplicaciones modernas. Seguridad: disponible varios niveles de seguridad. Escalabilidad: gran escalabilidad sin interumpir la actividad. Alta disponibilidad: implementaciones con tolerancia a errores y autoreparación predeterminadas. Alto rendimiento: el rendimiento necesario para las cargas de trabajo más exigentes.  Ventajas de MongoDB Atlas\n Ejecución\n Puesta en marcha de un clúster en segundos Implementaciones replicadas y sin interrupción Total escalabilidad: escalado horizontal o vertical en tan solo unos clics y sin interrumpir la actividad. Revisines automáticas y actualizaciones simpleficadas para las nuevas funciones de MongoDB  Protección y seguridad\n Autenticación y cifrado Copias de seguridad continuas con recuperación en un punto en el tiempo. Supervición detallada y alertas personalizadas.  Libertad de movimiento\n Modelo de planes de precio según demanda: se factura por hora. Compatible con diferentes tipos de de servicios de nube (AWS, GCP, Azure). Parte de un paquete de productos y servicios para todas las fases de la aplicación.   La configuración se realizará desde una cuenta free, MongoDb Atlas tambien ofrece una versión de pago.\nConfiguración de cuenta Nos dirigimos a la página oficial de MongoDB y selecionamos TRY FREE y nos registramos con un correo.\nUna vez puesto los datos y haber presionado en el botón Get started free redirrecionará a la siguiente ventana donde nos muestra lo que tendra nuestro clúster.\nContinuamos dando clic en Create clúster\nNos redireccionará a un dashboard donde el clúster aún se seguirá creando, pero podemos explorar mientras se crea en segundo plano. Una vez finalizado la creación realizamos lo siguiente:\nPunto 1: MongoDB Atlas nos ofrece una seguridad de conexión por IP, esto quiere decir que podemos configurarlo de 2 maneras.\n Add You Current IP Address con esta opcion podemos poner nuestra IP, lo malo de configurar esta opción es que cada vez que nos cambiamos de laptop o PC debemos de volver a configurarlo. Add a Different IP Address con esta opción podemos configurar una IP que permita las conexiones de cualquier laptop o PC, por ejemplo podemos colocar la siguiente IP 0.0.0.0/0.  Punto 2 Configuración de usuario de acceso\nAl realizar todo lo anterior, va quedando así:\nDespues del paso anterior procedemos a obtener la cadena de conexión, nos mostrará 3 opciones de la cual seleccionamos la siguiente:\nCon la URI copiada podras acceder desde tu GUI para MongoDB preferida.\nListo! ya tienes un servidor de MongoDB, ahora solo queda crear base de datos y colecciones.\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-05-06-mongodb-atlas/","tags":["mongodb"],"title":"Configuración de una cuenta en MongoDB Atlas"},{"categories":["Tutoriales"],"contents":"  Continuando con handlebars, esta vez construiremos plantillas mas avanzadas usando condiciones, bucles, with, variables de datos, helpers y partials.\n Contenido:\n Condiciones Bucles Propiedades anidadas Variables de datos FIRTS y LAST Variables de datos INDEX y KEY Variables de datos ROOT Helpers Helpers de bloque Partials  1. Condiciones \u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;¡Hola {{nick}}!\u0026lt;/h1\u0026gt; {{#if dispositivo}} \u0026lt;p\u0026gt;Te has conectado desde: {{dispositivo}}\u0026lt;/p\u0026gt; {{else}} \u0026lt;p\u0026gt;No hemos identificado desde dónde te conectas.\u0026lt;/p\u0026gt; {{/if}} \u0026lt;/script\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { let source = $(\u0026quot;#mi-plantilla\u0026quot;).html(); let plantilla = Handlebars.compile(source); let usuarioDispositivo = { nick: \u0026quot;Carlos\u0026quot;, dispositivo: \u0026quot;WEB\u0026quot; }; let usuarioSinIdentificar = { nick: \u0026quot;Carlos\u0026quot; }; let usuarioSinDefinir = { nick: \u0026quot;Carlos\u0026quot;, dispositivo: \u0026quot;\u0026quot; }; $(\u0026quot;#contenedor\u0026quot;).html(plantilla(usuarioDispositivo)); }); \u0026lt;/script\u0026gt;  El if trabajando sobre una propiedad se cumple solo cuando la propiedad existe y tiene un valor que no es vacio y en caso que sea vacio o que no exita lo interpreta como inexistente.\n{{#unless dispositivo}} \u0026lt;p\u0026gt;(unless) No hemos identificado desde donde te contectas.\u0026lt;/p\u0026gt; {{else}} \u0026lt;p\u0026gt;(unless) Te has conectado desde: {{dispositivo}}\u0026lt;/p\u0026gt; {{/unless}}  La expreción unless es lo contrario del if, es decir, se ejecuta igual que el if, tiene el mismo formato que el if hasta incluso soporta el else tambien pero en lugar de comprabar que la condición se cumple, esta se ejecuta cuando la condición no se cumple.\n2. Bucles \u0026lt;script id=\u0026quot;lista-indice\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Índice\u0026lt;/h1\u0026gt; \u0026lt;ul class=\u0026quot;list-unstyled\u0026quot;\u0026gt; {{#each this}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{enlace}}\u0026quot;\u0026gt;\u0026lt;span class=\u0026quot;glyphicon glyphicon-ok\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; {{nombre}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{/each}} \u0026lt;/ul\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; let indice = [ { nombre: \u0026quot;El problema\u0026quot;, enlace: \u0026quot;problema.html\u0026quot; }, { nombre: \u0026quot;Expresiones, sintaxis básica\u0026quot;, enlace: \u0026quot;expresiones.html\u0026quot; }, { nombre: \u0026quot;Uso básico\u0026quot;, enlace: \u0026quot;usobasico.html\u0026quot; }, { nombre: \u0026quot;Datos o contexto\u0026quot;, enlace: \u0026quot;datos.html\u0026quot; }, { nombre: \u0026quot;Comentarios\u0026quot;, enlace: \u0026quot;comentarios.html\u0026quot; }, { nombre: \u0026quot;Datos con contenido HTML\u0026quot;, enlace: \u0026quot;datoshtml.html\u0026quot; }, { nombre: \u0026quot;Mi primera plantilla\u0026quot;, enlace: \u0026quot;miprimeraplantilla.html\u0026quot; }, { nombre: \u0026quot;Estructuras condicionales\u0026quot;, enlace: \u0026quot;condicional.html\u0026quot; }, { nombre: \u0026quot;Estructuras iterativas\u0026quot;, enlace: \u0026quot;index.html\u0026quot; }, { nombre: \u0026quot;Propiedades anidadas\u0026quot;, enlace: \u0026quot;propiedadesanidadas.html\u0026quot; }, { nombre: \u0026quot;Variables @first y @last\u0026quot;, enlace: \u0026quot;variables_first_last.html\u0026quot; }, { nombre: \u0026quot;Variables @index y @key\u0026quot;, enlace: \u0026quot;variables_index_key.html\u0026quot; }, { nombre: \u0026quot;Variable @root\u0026quot;, enlace: \u0026quot;variables_root.html\u0026quot; }, { nombre: \u0026quot;Qué son los helpers\u0026quot;, enlace: \u0026quot;quesonloshelpers.html\u0026quot; }, { nombre: \u0026quot;Trabajando con helpers\u0026quot;, enlace: \u0026quot;helper.html\u0026quot; }, { nombre: \u0026quot;Helpers de bloque\u0026quot;, enlace: \u0026quot;blockhelper.html\u0026quot; }, { nombre: \u0026quot;Partials\u0026quot;, enlace: \u0026quot;partial.html\u0026quot; } ]; $(document).ready(function() { let origen; let plantilla; origen = document.getElementById(\u0026quot;lista-indice\u0026quot;).innerHTML; plantilla = Handlebars.compile(origen); $(\u0026quot;#contenedor\u0026quot;).html(plantilla(indice)); }); \u0026lt;/script\u0026gt;  Esta plantilla arranca con un h1 estático con el texto que no coge contenido dinámico también inicializa una lista y la cierra, es una lista desordenada que forma parte del índice, y finalmente tenemos la parte de iteración a través de el array que se le pasa a la plantilla, si nos fijamos en la plantilla se le está pasando el índice, el índice es una variable en javascript que directamente es una array por lo tanto la única manera de referencia el contexto de tipo array que queremos recorrer es mediante la palabra this, this es una palabra que existe en handlebars y en este caso this tomará el valor del indice que es precisamente un array por lo tanto si funcionará la instrucción each sobre this.\nLa instrucción each se contruye muy parecido a la instrucción if.\n3. Propiedades anidadas \u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;{{apellidos}}, {{nombre}}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Edad: {{edad}}\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;En la red:\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026quot;list-unstyled\u0026quot;\u0026gt; {{#with social}} {{#if twitter}} \u0026lt;li\u0026gt;\u0026lt;span class=\u0026quot;glyphicon glyphicon-chevron-right\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026quot;{{twitter}}\u0026quot;\u0026gt;En Twitter\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{/if}} {{#if facebook}} \u0026lt;li\u0026gt;\u0026lt;span class=\u0026quot;glyphicon glyphicon-chevron-right\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026quot;{{facebook}}\u0026quot;\u0026gt;En Facebook\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{/if}} {{#if web}} \u0026lt;li\u0026gt;\u0026lt;span class=\u0026quot;glyphicon glyphicon-chevron-right\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026quot;{{web}}\u0026quot;\u0026gt;Web\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{/if}} {{#if blog}} \u0026lt;li\u0026gt;\u0026lt;span class=\u0026quot;glyphicon glyphicon-chevron-right\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026quot;{{blog}}\u0026quot;\u0026gt;Blog\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{/if}} {{/with}} \u0026lt;/ul\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { let registro = { nombre: \u0026quot;Marcos\u0026quot;, apellidos: \u0026quot;Gonzalez Sancho\u0026quot;, edad: \u0026quot;22\u0026quot;, social: { twitter: \u0026quot;https://twitter.com/qmarcos\u0026quot;, facebook: \u0026quot;https://facebook.com/qinteractiva\u0026quot;, web: \u0026quot;http://q-interactiva.com\u0026quot;, blog: \u0026quot;http://blog.q-interactiva.com\u0026quot; } }; let source = $(\u0026quot;#mi-plantilla\u0026quot;).html(); let plantilla = Handlebars.compile(source); $(\u0026quot;#contenedor\u0026quot;).html(plantilla(registro)); }); \u0026lt;/script\u0026gt;  Todo ese bloque que acaba con el cierre de la instrucción with en su interior entiende que ya está accediendo al objeto social por lo tanto para acceder por ejemplo a la propiedad Facebook ya no hace falta poner el social. adelante y de hecho no sería correcto ponerlo delante simplemente ponemos Facebook y ya lo está buscando en el contexto de la propiedad social.\nPor lo tanto es equivalente haber puesto sin el with =\u0026gt; social.Twitter, social.Facebook, social.web, social.blog. Porque una vez que ponemos with podemos ahorrarnos ese camino hasta la propiedad que estamos accediendo porque ya va implícita con el with, además en este caso hemos añadido unos condicionales para que podamos apreciar como se pueden mezclar entre ellas las instrucciones tanto el with con el if y se pueden combinar en base a nuestras necesidades. Por ejemplo, si quitamos el blog temporalmente de nuestro objeto de datos veremos como deja de salir debido al if.\nPor lo tanto with como decíamos sirve para facilitar el acceso a propiedades anidadas dentro del objeto contexto en el que nos encontramos.\nwith se construye muy parecido a las instrucción each.\n4. Variables de datos FIRTS y LAST \u0026lt;h1\u0026gt;{{apellidos}}, {{nombre}}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Edad: {{edad}}\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;En la red:\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026quot;list-unstyled\u0026quot;\u0026gt; {{#each social}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{url}}\u0026quot;\u0026gt; \u0026lt;!-- @firts | @last --\u0026gt; {{#if @last}} \u0026lt;span class=\u0026quot;glyphicon glyphicon-chevron-right\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; {{else}} \u0026lt;span class=\u0026quot;glyphicon glyphicon-comment\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; {{/if}} {{nombre}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{/each}} \u0026lt;/ul\u0026gt;  Handlebars nos ofrece una serie de variables predefinidas en el sistema que nos dan determinada información dependiendo del contexto en el que se están usando, en este caso vamos a ver dos de ellas (first y last), que nos van a servir para conocer cuando estamos en el primer o último elemento de un bucle que estamos recorriendo mediante each, esto su aplicación directa es en un escenario de maquetacion web por lo tanto la aplicación de estas dos variables se suele usar dentro de lo que es la plantilla de handlebars, la plantilla que es la parte dedicada en específico a la presentación y por lo tanto como decimos vamos a tener un mecanismo de diferenciar el primer elemento del último y del resto de los elementos de esa iteración y eso nos va a permitir por lo que en muchas situaciones nos encontramos que tenemos que aplicar por ejemplo una clase diferente al primer elemento de una lista o al último como podría ser en el caso de un menú web.\n5. Variables de datos INDEX y KEY \u0026lt;h1\u0026gt;{{apellidos}}, {{nombre}}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Edad: {{edad}}\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;En la red:\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026quot;list-unstyled\u0026quot;\u0026gt; {{#each social}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{url}}\u0026quot;\u0026gt;\u0026lt;span class=\u0026quot;glyphicon glyphicon-chevron-right\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; {{nombre}}\u0026lt;/a\u0026gt; ({{@index}})\u0026lt;/li\u0026gt; {{/each}} \u0026lt;/ul\u0026gt; \u0026lt;!-- Resultado: twitter (0) facebook (1) web (2) blog (3) --\u0026gt; \u0026lt;h2\u0026gt;Propiedades del contexto:\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026quot;list-unstyled\u0026quot;\u0026gt; {{#each this}} \u0026lt;li\u0026gt;{{@key}}\u0026lt;/li\u0026gt; {{/each}} \u0026lt;/ul\u0026gt; \u0026lt;!-- Resultado: nombre apellidos edad social --\u0026gt;  Handlebars tambien nos ofrece a través de sus variables predefinidas index y key la posibilidad de tener más conocimiento cuando recorremos un objeto o un array mediante la estructura de iteración each esto es así porque nos va a permitir saber el índice en el que nos encontramos y nos va a permitir también en el caso de que no sea un array saber la propiedad en la que nos encontramos es decir mediante la estructura de iteración each no solamente podemos recorrer array sino que también podemos recorrer objetos a través de cada una de sus propiedades y precisamente estas variables predefinidas index y key nos van a servir para tener esa información.\n@key esta variable va ir tomando como valores en la iteración los nombres de las propiedades sobre la que va iterando.\nY vemos que por tanto podemos saber en qué interacción nos encontramos en cuanto a número y también podemos saber qué propiedad estamos recorriendo de un objeto que a priori no tenemos porque conocer, por lo tanto estas dos variables predefinidas son muy útiles a la hora de utilizar bucles each porque nos dan un dinamismo y una flexibilidad muy interesante a la hora de interpretar como renderizar nuestra plantilla para cada uno de los elementos que recorremos pero sí que es cierto que estas dos variables predefinidas más que en un each de una plantilla convencional de handlebars van a tener mucho más sentido en un each que empleemos en un helper que es una estructura especial que nos permite renderizar la plantilla totalmente adaptada a nuestras necesidades.\n6. Variables de datos ROOT Root es una variable predefinida que nos ofrece handlebars que es realmente útil para acceder a la raíz del contexto en el que estamos trabajando no obstante tiene alguna particularidad que es muy interesante tener en conocimiento porque nos puede ahorrar unos cuantos dolores de cabeza cuando trabajamos con ella.\n\u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;{{apellidos}}, {{nombre}}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Edad: {{edad}}\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;En la red:\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026quot;list-unstyled\u0026quot;\u0026gt; \u0026lt;p\u0026gt;@root: {{@root.nombre}} / {{this.nombre}}\u0026lt;/p\u0026gt; {{#each social}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{url}}\u0026quot;\u0026gt;\u0026lt;span class=\u0026quot;glyphicon glyphicon-chevron-right\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; {{nombre}}\u0026lt;/a\u0026gt; ({{@index}} - {{@root.nombre}} / {{this.nombre}}) \u0026lt;/li\u0026gt; {{/each}} \u0026lt;/ul\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { var registro = { nombre: \u0026quot;Marcos\u0026quot;, apellidos: \u0026quot;Gonzalez Sancho\u0026quot;, edad: \u0026quot;22\u0026quot;, social: [ { nombre: \u0026quot;twitter\u0026quot;, url: \u0026quot;https://twitter.com/qmarcos\u0026quot; }, { nombre: \u0026quot;facebook\u0026quot;, url: \u0026quot;https://facebook.com/qinteractiva\u0026quot; }, { nombre: \u0026quot;web\u0026quot;, url: \u0026quot;http://q-interactiva.com\u0026quot; }, { nombre: \u0026quot;blog\u0026quot;, url: \u0026quot;http://blog.q-interactiva.com\u0026quot; } ] }; var source = $(\u0026quot;#mi-plantilla\u0026quot;).html(); var plantilla = Handlebars.compile(source); $(\u0026quot;#contenedor\u0026quot;).html(plantilla(registro)); }); \u0026lt;/script\u0026gt;  root es una variable predefinida que nos permite acceder siempre al contexto raíz de la plantilla estemos dentro de un bucle o estemos dentro de una instrucción with o en cualquier otro escenario, siempre nos va referenciar el objeto principal o contexto de la plantilla.\n7. Helpers Vamos a crear un helper que nos permita sumar dos valores, no es nada complicado, simplemente hay que realizar lo siguiente.\n\u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;{{apellidos}}, {{nombre}}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Edad: {{edad}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Salario: {{salario}}, Extras: {{extras}}\u0026lt;/p\u0026gt; \u0026lt;!-- aqui invocamos al helper --\u0026gt; \u0026lt;strong\u0026gt;{{salarioTotal this}}\u0026lt;/strong\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { let empleado = { nombre: \u0026quot;Marcos\u0026quot;, apellidos: \u0026quot;Gonzalez Sancho\u0026quot;, edad: \u0026quot;22\u0026quot;, salario: 1500, extras: 300 }; let source = $(\u0026quot;#mi-plantilla\u0026quot;).html(); let plantilla = Handlebars.compile(source); $(\u0026quot;#contenedor\u0026quot;).html(plantilla(empleado)); }); // salarioTotal =\u0026gt; nombre del helper // object =\u0026gt; parametros Handlebars.registerHelper(\u0026quot;salarioTotal\u0026quot;, function(object) { let respuesta = \u0026quot;TOTAL: \u0026quot; + (object.salario + object.extras); return new Handlebars.SafeString(respuesta); }); \u0026lt;/script\u0026gt;  Ejemplo 1 Realizaremos otro ejemplo con helpers, esta vez crearemos un pequeño algoritno dentro de un helper el cual nos permitira obtener el importe mínimo, máximo y el promedio por año a partir de un array. \u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;{{apellidos}}, {{nombre}}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Edad: {{edad}}\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;Histórico de salarios:\u0026lt;/h2\u0026gt;\t\u0026lt;dl class=\u0026quot;dl-horizontal\u0026quot;\u0026gt; {{#each salarios}} \u0026lt;dt\u0026gt;{{anio}}\u0026lt;/dt\u0026gt; \u0026lt;!-- AQUI SE LLAMA A LOS HELPERS --\u0026gt; \u0026lt;dd\u0026gt;Max: $ {{salarioMaximo importes}} / Min: $ {{salarioMinimo importes}}$ / Promedio: $ {{salarioPromedio importes}}\u0026lt;/dd\u0026gt; {{/each}} \u0026lt;/dl\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { let empleado = { nombre: 'Marcos', apellidos: 'Gonzalez Sancho', edad: '22', salarios: [ { anio: '2013', importes:[1350,1500,1500,1500,1500,2000,1500,1500,1500,1500,1500,1500,2000]}, { anio: '2012', importes:[1200,1350,1350,1350,1350,1500,1350,1350,1350,1350,1350,1350,1500]}, { anio: '2011', importes:[1100,1200,1200,1200,1200,1350,1200,1200,1200,1200,1200,1200,1350]}, { anio: '2010', importes:[900,1100,1100,1100,1100,1200,1100,1100,1100,1100,1100,1100,1200]}, ] };\tlet source = $(\u0026quot;#mi-plantilla\u0026quot;).html();\tlet plantilla = Handlebars.compile(source); $('#contenedor').html( plantilla( empleado ) ); }); // CREACIÓN DE HELPERS Handlebars.registerHelper(\u0026quot;salarioMaximo\u0026quot;, function(salarios) { let i; let max = 0; for (i = 0; i \u0026lt; salarios.length; i++) { if (salarios[i] \u0026gt; max) { max = salarios[i]; } } return max.toFixed(2); }); Handlebars.registerHelper(\u0026quot;salarioMinimo\u0026quot;, function(salarios) { let i; let min = 0; for (i = 0; i \u0026lt; salarios.length; i++) { if (i == 0) { min = salarios[i]; } else if (salarios[i] \u0026lt; min) { min = salarios[i]; } } return min.toFixed(2); }); Handlebars.registerHelper(\u0026quot;salarioPromedio\u0026quot;, function(salarios) { let i; let total = 0; let periodos = salarios.length; for (i = 0; i \u0026lt; periodos; i++) { total += salarios[i]; } return (total / periodos).toFixed(2); }); \u0026lt;/script\u0026gt;   Recordemos que los helpers son mecanismos que nos ofrecen handlebars para poder aplicar nuestra propia lógica de aplicación en los casos que nos interese y poder trabajar con los datos o el contexto que tiene nuestra plantilla de la manera más adecuada a nuestras necesidades.\n 8. Helpers de bloque Handlebars.registerHelper('negrita', function(opciones){ return '\u0026lt;strong\u0026gt;'+opciones.fn(this)+'\u0026lt;/strong\u0026gt;'; });   opciones.fn() handlebar lo contiene siempre en todos los bloques que se pasa. this es el contexto en el cual se esta ejectando el propio helper.  La llamada un helper de bloque se realiza al igual que un if, with o each.\n\u0026lt;p\u0026gt;{{#negrita}}Edad: {{edad}}{{/negrita}}\u0026lt;/p\u0026gt;  Ahora veremos un ejemplo mas avanzado donde pasaremos el contexto. Basicamente igual que un #each.\nHandlebars.registerHelper('historico', function(contexto, opciones) { let i; let max; let respuesta = ''; max = contexto.length; respuesta = '\u0026lt;dl class=\u0026quot;dl-horizontal\u0026quot;\u0026gt;'; for (i=0; i\u0026lt;max; i++) { respuesta += opciones.fn(contexto[i]); } respuesta += '\u0026lt;/dl\u0026gt;'; return respuesta; });  Invocamos el nuevo helper de la siguiente manera.\n\u0026lt;!-- CON HELPER--\u0026gt; {{#historico salarios}} \u0026lt;dt\u0026gt;Año: {{anio}}\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Max: {{salarioMaximo importes}}€ / Min: {{salarioMinimo importes}}€ / Promedio: {{salarioPromedio importes}}€\u0026lt;/dd\u0026gt; {{/historico}} \u0026lt;!-- SIN HELPER--\u0026gt; \u0026lt;dl class=\u0026quot;dl-horizontal\u0026quot;\u0026gt; {{#each salarios}} \u0026lt;dt\u0026gt;{{anio}}\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Max: {{salarioMaximo importes}}€ / Min: {{salarioMinimo importes}}€ / Promedio: {{salarioPromedio importes}}€\u0026lt;/dd\u0026gt; {{/each}} \u0026lt;/dl\u0026gt;  9. Partials Cuando desarrollamos una aplicación web es muy habitual encontrarse fragmentos de los elemento que utilizamos en la interfaz que se tienen que repetir en diferentes pantallas, es decir zonas de nuestro código que serían reutlizables en diferentes escenarios. Evidentemente cuando utilizamos un sistema de motor de plantillas como es el caso de handlebars es mas interesante tener la opción de que algunos fragmentos de la plantilla esten aislados y puedan ser reutilizados ya no solo dentro de la misma plantilla en varias ocaciones, si no incluso entre diferentes plantillas.\nPara lograr esta funcionalidad, handlebars dispone de un mecanismo que se denomina partials. Un partial no es otra cosa que un fragmento de plantilla que se saca fuera, concretamente a un función y por lo tanto puede ser invocados desde cualquier plantilla tantas veces como deseemos.\nRecibe dos parametros.\n el primero es un string con el nombre del partial el segundo es un string con el fragmento de plantilla que representa ese partial\nHandlebars.registerPartial('listadoSalariosAnual', '\u0026lt;h2\u0026gt;Histórico de salarios:\u0026lt;/h2\u0026gt;\u0026lt;dl class=\u0026quot;dl-horizontal\u0026quot;\u0026gt;{{#each salarios}}\u0026lt;dt\u0026gt;{{anio}}\u0026lt;/dt\u0026gt;\u0026lt;dd\u0026gt;Max: {{salarioMaximo importes}}€ / Min: {{salarioMinimo importes}}€ / Promedio: {{salarioPromedio importes}}€\u0026lt;/dd\u0026gt;{{/each}}\u0026lt;/dl\u0026gt;');   Nota: Al copiar y pegar la porcion de código que queremos que sea un partial, Javascript nos soporta en los string saltos de linea por lo que el segundo parametro debe de ser una sola linea.\nEl partial se invoca de la siguiente manera:\n\u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;{{apellidos}}, {{nombre}}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Edad: {{edad}}\u0026lt;/p\u0026gt; {{\u0026gt; listadoSalariosAnual}} \u0026lt;/script\u0026gt;  ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-04-15-handlebars-prt-2/","tags":["Handlebars","JS"],"title":"Handlebars | Parte 2"},{"categories":["Tutoriales"],"contents":"  Handlebars.js es un motor de plantillas muy popular que es potente, fácil de utilizar y que cuenta con una gran comunidad. Se basa en el lenguaje de plantillas Mustache, pero lo mejora de distintas maneras.\n Los sistemas de plantillas son muy importantes, porque nos permiten separar el código por responsabilidades y crear la salida de las aplicaciones de una manera sencilla, manteniendo el código HTML separado del código Javascript.\nInstalación Para poder descargar el cndjs has click aqui.\n¿Por qué son necesarios los motores de plantillas? Para entender en que situaciones nos puede venir bien el uso de un motor de plantillas de javascript, vamos a ver un sencillo ejemplo de unos de los problemas que nos podemos encontrar que con código javascript convencional no suele resolverse de una manera óptima. Para ello va ser una acción tan simple como la incluir un listado de elementos html en un código html existente mediente javascript la que nos permita apreciar las bondades de un motor de plantillas en este lenguaje.\nlet alumnos = [{nombre:'Marcos', edad:20}, {nombre:'Armando', edad:22}, {nombre:'Guzmán', edad:24}];  Por un la lado tenemos un array de alumnos que en su interior solo tiene un nombre y una edad.\nfunction generarListadoAlumnos_A (alumnos) { var total = alumnos.length; var html = ''; var i = 0; html = '\u0026lt;dl\u0026gt;'; for (i=0; i\u0026lt;total; i++) { html += '\u0026lt;dt\u0026gt;'+alumnos[i].nombre+'\u0026lt;/dt\u0026gt;'+'\u0026lt;dd\u0026gt;('+alumnos[i].edad+')\u0026lt;/dd\u0026gt;'; } html += '\u0026lt;/dl\u0026gt;'; return html; } $(document).ready(function() {\t$('#contenedor').append(generarListadoAlumnos_A(alumnos)); })  En la función generarListadoAlumnos_A lo que hacemos es generar un listado, en ests caso una lista de definición mediante la etiqueta \u0026lt;dl\u0026gt; que va recorriendo ese array de alumnos y va pintando el nombre y la edad.\n¿Qué problema tiene esta solucion? Tiene el problema de la importante mezcla que se esta dando entre etiquetas html y código javascript, como podemos ver simplemente en esta linea html += '\u0026lt;dt\u0026gt;'+alumnos[i].nombre+'\u0026lt;/dt\u0026gt;'+'\u0026lt;dd\u0026gt;('+alumnos[i].edad+')\u0026lt;/dd\u0026gt;'; estamos haciendo varias concatenaciones que no es difícil imaginar que en un escenario más complejo que está pequeña lista que estamos usando de ejemplo se convierte en un código difícilmente mantenible, podríamos hacer una aproximación un poco más elaborada, de hecho mucha gente cuando se va enfrentando a este problema es lo que hace, que podría llevarnos a una solución alternativa como la que vamos a ver a continuación\nfunction generarListadoAlumnos_B ( alumnos ) { let total = alumnos.length; let html = ''; let i = 0; let templateAlumno = '\u0026lt;dt\u0026gt;{{nombre}}\u0026lt;/dt\u0026gt;\u0026lt;dd\u0026gt;({{edad}})\u0026lt;/dd\u0026gt;'; let alumno = ''; html = '\u0026lt;dl\u0026gt;'; for (i=0; i\u0026lt;total; i++) { alumno = templateAlumno.replace('{{nombre}}', alumnos[i].nombre); alumno = alumno.replace( '{{edad}}', alumnos[i].edad); html += alumno; } html += '\u0026lt;/dl\u0026gt;'; return html; }  Esta función lo que hace en vez de generar la combinación de etiquetas html y datos en una única línea lo que hacemos es tener la línea ya preparada mediante una cadena de texto donde identificamos donde va ir el nombre y la edad y hacemos un reemplazo del nombre y de la edad por estas etiquetas que nos hemos sacado un poco de la manga {{nombre}} y {{edad}} esto es un poco más limpio porque digamos que la plantilla de cada elemento del listado la tenemos en un único String con lo cual está más o menos separada pero aún así seguimos mezclando bastante y se nos dan situaciones que no resuelve como por ejemplo el hecho de que el nodo que abre la lista y el nodo que la cierra pues tienen que ir a la vez concatenadas en el bucle.\nPero sigue siendo una solución que no acaba de ser la más eficiente estas dos formas no son una forma limpia. Precisamente los motores de plantillas vienen para solucionar esta combinación de datos con html en un entorno del lado del cliente es decir en un entorno controlado por javascript.\nConceptos básicos Los componentes principales de cualquier motor de plantilla son :\n Por un lado evidentemente la plantilla html que normalmente es la representación visual de la información que queremos o bien modificar en la página existente o bien incluir como contenido nuevo y esta plantilla lo que persigue normalmente es ser una mera representación lo mas cercana html posible de manera que no tenga ninguna complejidad adicional. Por otro lado tenemos los datos que son los que se combinarán con la plantilla para obtener el resultado final, es decir si tenemos una plantilla para mostrar la ficha de una película pues tendríamos que tener por otro lado los datos de la película que completarán esa plantilla para personalizarla en el caso de esa película en concreto, pues normalmente cómo nos podemos imaginar estos datos vienen o bien de la introducción manual desde un formulario por parte del usuario o bien desde una petición al servidor que nos devuelve dicha información en el caso de javascript en la mayoría de los casos en formato json. Por otro lado tenemos las expresiones que lo que nos permiten es precisamente unir esa plantilla con esos datos, estás expresiones son la herramienta que nos da el motor de plantillas para poder indicar en la plantilla dónde van a ir los datos e incluso poder hacer determinados operaciones con esos datos antes de que se procesan para dar el resultado final, estás expresiones es donde normalmente se encuentra la diferencia principal entre motores de plantillas ya que algunos tienden a aumentar su complejidad y su potencia para que el propio motor de plantilla contemple diferentes opciones sobre los datos a la hora de mostrarlos en la plantilla y hay otra aproximación que es la que da handlebars que es que se diferencia al máximo posible lo que es la vista de la lógica de la aplicación de manera que la plantilla sea una plantilla pura, los datos vayan por separado y las expresiones sean lo más sencillas posible para que simplemente permitan incluir o no los datos, obviamente esta aproximación que tiene él va a extenderse con otras herramientas que nos van a permitir adaptar esa manera de pintar la plantilla en el caso de cada una de las necesidades de nuestro proyecto existe la diferencia entre los motores de plantillas principal en este punto que es como gestionar las expresiones o la manera de incluir los datos en la plantilla. Y finalmente están los procesos de renderizado y compilación en el caso de renderizado es el proceso a través del cual el motor consigue generar el html final para ser pintado en pantalla y por otro lado la compilación e incluso en algunos casos precompilacion es como gestionar esa plantilla a la hora de optimizar el trabajo con ella posteriormente al aplicar los datos, en el caso particular de handlebars permite la precompilacion incluso que como consecuencia nos ofrece un rendimiento notablemente superior a otros motores que no cuentan con esta característica.  Vamos a ver en este sencillo ejemplo de cómo hacer uso de las expresiones que es el mecanismo con el que cuenta el motor de plantillas en este caso handlebar para vincular los datos de los que disponemos a las zonas de la plantilla donde corresponda para ello vamos a crear un fichero html para poder mostar cómo se utilizan las expresiones.\n\u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{titulo}}\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;{{breve}}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{descripcion}}\u0026lt;/p\u0026gt; \u0026lt;img src=\u0026quot;{{imagen}}\u0026quot; alt=\u0026quot;{{breve}}\u0026quot; /\u0026gt; \u0026lt;/div\u0026gt;  Evidentemente para que esto funcionará tendríamos que tener un objeto en javascript que tuviera esos campos título, breve, descripción y imagen de manera que handlebars fuera capaz de encontrar ese dato y hacer el reemplazo en la zona de la plantilla que correspondía, esto es el uso más sencillo de las expresiones en handlebars.\nEl clásico Hola Mundo \u0026lt;!-- Hacemos refrencia al archivo handlebars --\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Creamos la plantilla en handlebar de la siguiente manera. --\u0026gt; \u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; ¡Hola mundo! \u0026lt;/script\u0026gt; \u0026lt;!-- Luego agregamos la siguiente etiqueta --\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // Hacemos uso de javascript para generar el handlebar window.onload = function() { let contenedor; let origen; let plantilla; contenedor = document.getElementById('contenedor'); origen = document.getElementById('mi-plantilla').innerHTML; // aquí se hace la compilación plantilla = Handlebars.compile(origen); contenedor.innerHTML = plantilla(); } \u0026lt;/script\u0026gt;  Una plantilla más trabajada \u0026lt;!-- Hacemos refrencia al archivo handlebars --\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Creamos la plantilla en handlebar de la siguiente manera. --\u0026gt; \u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;p\u0026gt;¡Hola {{nombre}}!\u0026lt;/p\u0026gt; \u0026lt;!-- esta accidendo a esos datos a la pocisión 0 como si fuera un array y esta buscando ese campo nombre --\u0026gt; \u0026lt;p\u0026gt;¡Hola {{this.[0].nombre}}!\u0026lt;/p\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;!-- Luego agregamos la siguiente etiqueta --\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { var origen = $('#mi-plantilla').html(); var plantilla = Handlebars.compile(origen); var persona_A = { nombre: 'Carlos', edad: 20}; var persona_B = { nombre: 'Alicia', edad: 22}; var alumnos = [persona_A, persona_B]; $('#contenedor').html( plantilla(alumnos) ); }) \u0026lt;/script\u0026gt;  This hace alusión siempre al contexto mismo en el que nos encontramos en la plantilla, en este caso el array alumnos y vemos que la diferencia está en que al contrario de cómo ocurren en javascrit donde se utiliza this con el corchete seguido en handlebars para referirnos a un array hay que poner el punto siempre entre cada uno de los elementos, es decir el equivalente en javascript que tendríamos que aplicar para acceder al primer elemento del array alumno sería this[0].nombre y vemos como en el caso de handlebars el array también requiere del punto después del this es la única diferencia así notable que existe con la sintaxis habitual empleada en javascript y por lo tanto de esta manera podemos acceder a la posición de un array y concretamente a la propiedad nombre de elemento en caso de existir.\nCómo último detalle cabe destacar que este punto se puede sustituir en handlebars por el símbolo de la barra (/ =\u0026gt; this/[0]/nombre) precisamente también para hacerlo en parte compatible con mustasch que es el origen de handlebars. Personalmente prefiero el punto porque me parece que es mucho más legible a la hora de entenderlo como datos en JavaScript.\nComentarios con handlebars \u0026lt;!-- Hacemos refrencia al archivo handlebars --\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Creamos la plantilla en handlebar de la siguiente manera. --\u0026gt; \u0026lt;script id=\u0026quot;mi-plantilla\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;p\u0026gt;¡Hola {{nombre}}!\u0026lt;/p\u0026gt; {{! Esto es un comentario de Handlebars }} {{!-- Esto es un tercer comentario con {{nombre}} --}} \u0026lt;/script\u0026gt; \u0026lt;!-- Luego agregamos la siguiente etiqueta --\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { var origen = $(\u0026quot;#mi-plantilla\u0026quot;).html(); var plantilla = Handlebars.compile(origen); var persona = { nombre: 'Carlos', edad: 30}; $('#contenedor').html( plantilla(persona) ); }) \u0026lt;/script\u0026gt;  Mi primera plantilla .poster, .info { box-sizing: border-box; float: left; } .poster { width: 50%; padding-right: 20px; } .poster img { width: 100%; height: auto; } .info { width: 50%; padding-left: 20px; } .clearfix { clear: both; }  Guardamos el código anterior como pelicula.css y lo referenciamos al siguiente archivo.\n\u0026lt;!-- referencias --\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;css/pelicula.css\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Creamos la plantilla en handlebar de la siguiente manera. --\u0026gt; \u0026lt;script id=\u0026quot;pelicula\u0026quot; type=\u0026quot;text/x-handlebars-template\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;film\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;poster\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;{{cartel}}\u0026quot; alt=\u0026quot;{{titulo}}\u0026quot; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;info\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;{{titulo}} ({{anio}})\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Duración: {{duracion}} min.\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Sinopsis\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{sinopsis}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{{fichacompleta}}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br class=\u0026quot;clearfix\u0026quot; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;!-- Luego agregamos la siguiente etiqueta --\u0026gt; \u0026lt;div id=\u0026quot;contenedor\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { let pelicula = { titulo: 'Cadena Perpetua', anio: 1994, duracion: 142, sinopsis: 'Dos hombres encarcelados durante años, que encuentran consuelo y redención a través de actos de decencia común.', cartel: 'https://gcdn.emol.cl/los-90/files/2016/08/Sueno-de-fuga.jpg', fichacompleta: '\u0026lt;a href=\u0026quot;http://www.imdb.com/title/tt0111161/?ref_=nm_knf_i1\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;Ver ficha en IMDB\u0026lt;/a\u0026gt;' }; let origen = $('#pelicula').html(); let plantilla = Handlebars.compile( origen ); $('#contenedor').html( plantilla(pelicula) ); }) \u0026lt;/script\u0026gt;  El resultado sera el siguiente:\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-04-09-handlebars-prt-1/","tags":["Handlebars","JS"],"title":"Handlebars | Parte 1"},{"categories":["Tutoriales"],"contents":"  A una promesa, como su propio nombre lo dice, es simplemente un objeto que puede o no devolver algún valor en la línea de tiempo presente y futuro. Me gusta describir una promesa como una especie de Karma: Tú haces algo, y en consecuencia obtendrás algo, ahora o en un futuro. Esto aplica igual a las promesas, tu ejecutas código asíncrono y obtienes la promesa de que obtendrás una respuesta, que puede ser en ese instante o en un futuro.\n // sintaxis de una promesa let promise = new Promise(function(resolve, reject) { // executor (the producing code, \u0026quot;singer\u0026quot;) });  El promise objeto resultante tiene propiedades internas:\n state - inicialmente \u0026ldquo;pendiente\u0026rdquo;, luego cambia a \u0026ldquo;cumplido\u0026rdquo; o \u0026ldquo;rechazado\u0026rdquo;, result - Un valor arbitrario de su elección, inicialmente undefined.  Cuando el ejecutor finaliza el trabajo, debe llamar a una de las funciones que obtiene como argumentos:\n resolve(value) - para indicar que el trabajo terminó con éxito:  establece stateque \u0026ldquo;fulfilled\u0026rdquo;, establece resulta value.  reject(error) - para indicar que ocurrió un error:  establece stateque \u0026ldquo;rejected\u0026rdquo;, establece resulta error.   Problema Se requiere mostrar por consola los post con sus respectivos comentarios consumiendo la siguientes urls:\n/* post: https://jsonplaceholder.typicode.com/posts commets: https://jsonplaceholder.typicode.com/comments?postId={id} */  La posible solucion que se nos viene a la mente es la siguiente:\n\u0026quot;use strict\u0026quot;; const request = require(\u0026quot;request\u0026quot;); (async () =\u0026gt; { let url1 = \u0026quot;https://jsonplaceholder.typicode.com/posts\u0026quot;; let url2 = \u0026quot;https://jsonplaceholder.typicode.com/comments?postId={id}\u0026quot;; request(url1, (err, res, bodyPost) =\u0026gt; { if (err) console.error(err); console.log(\u0026quot;bodyPost\u0026quot;, bodyPost); for (const key in bodyPost) { const element = bodyPost[key]; let url = url2.replace(\u0026quot;{id}\u0026quot;, element.id); request(url, (e, r, bodyComments) =\u0026gt; { if (e) console.error(e); console.log(\u0026quot;bodyComments\u0026quot;, bodyComments); }) } }); })();  Pero tenemos un problema, el request que esta dentro del bucle for no esperara a que responda, eso causaría un enredo, la solución que se plantea será la siguiente en la cual usaremos promesas con funciones asincronas.\n\u0026quot;use strict\u0026quot;; const request = require(\u0026quot;request\u0026quot;); const config = { url: { post: \u0026quot;https://jsonplaceholder.typicode.com/posts\u0026quot;, comments: \u0026quot;https://jsonplaceholder.typicode.com/comments?postId={id}\u0026quot; } } async function getPost() { return new Promise((resolve, reject) =\u0026gt; { request(config.url.post, (err, res, body) =\u0026gt; { if (err) reject(err); resolve(body); }) }); } async function getComments(id) { let url = config.url.comments.replace(\u0026quot;{id}\u0026quot;, id); return new Promise((resolve, reject) =\u0026gt; { request(url, (err, res, body) =\u0026gt; { if (err) reject(err); resolve(body); }) }); } (async () =\u0026gt; { let posts = JSON.parse(await getPost()); for (const key in posts) { const element = posts[key]; console.log(\u0026quot;post\u0026quot;, element); let comments = await getComments(element.id); console.log(\u0026quot;comments\u0026quot;, comments); } })();  Comenta, disfruta y comparte! ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-04-03-javascript-promesas/","tags":["JS"],"title":"Javascript: Promesas"},{"categories":["Tutoriales"],"contents":"  Microsoft SQL Server es un sistema de gestión de base de datos relacional (RDBMS) producido por Microsoft. Su principal lenguaje de consulta es Transact-SQL, una aplicación de las normas ANSI / ISO estándar Structured Query Language (SQL) utilizado por ambas Microsoft y Sybase.\n Usaremos clases y funcion asincronas con promesas en javascript ES6.\nCreando el Package.json Antes de proceder con cualquier instalación de paquetes npm necesitamos crear nuestro package.json.\n Como primer paso creamos una carpeta donde estarán todos nuestros archivos. Luego, levantar la ventana de comandos dentro de la carpeta y ejecutar el siguiente comando npm init. Podemos personalizar o simplemente precionar la tecla enter hasta terminar.  Al finalizar tendremos un archivo como este:\n{ \u0026quot;name\u0026quot;: \u0026quot;[nombre]\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;[versión]\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;[descripción]\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot; }, \u0026quot;author\u0026quot;: \u0026quot;Hugo Roca - hugo.rock20@hotmail.com\u0026quot;, \u0026quot;license\u0026quot;: \u0026quot;[licencia]\u0026quot; }  Instalando npm mssql Para este caso utilizaremos al paquete mssql (https://www.npmjs.com/package/mssql), en la consola de comandos copiamos y pegamos lo siquiente: npm i mssql, una ves terminado se creará una carpeta por defecto node_modules, en donde se guardan todas las dependencias.\nCreando tabla y store procedure En SQLServer ejecutamos el siguiente script, que nos creará las tablas, creará datos y store procedures.\nCREATE DATABASE NodeSQLPruebas GO USE NodeSQLPruebas GO CREATE TABLE test( id int identity(1,1), descripcion varchar(200), fecha datetime primary key (id) ) GO insert into test(descripcion, fecha) values('Lorem ipsum dolor sit amet, consectetur adipiscing elit.', getdate()) insert into test(descripcion, fecha) values('Mauris sagittis, dolor vitae posuere sollicitudin, sem lorem euismod nunc, quis consectetur dolor augue ac turpis.', getdate()) insert into test(descripcion, fecha) values('Phasellus in dui vitae magna placerat aliquam eget nec velit.', getdate()) insert into test(descripcion, fecha) values('Praesent ut arcu in nunc eleifend aliquam vel id metus.', getdate()) insert into test(descripcion, fecha) values('Ut ac lectus fringilla felis imperdiet malesuada.', getdate()) insert into test(descripcion, fecha) values('Morbi at mattis turpis.', getdate()) insert into test(descripcion, fecha) values('Cras gravida diam in lorem venenatis fermentum. ', getdate()) insert into test(descripcion, fecha) values('Donec suscipit odio ut leo fermentum lacinia.', getdate()) insert into test(descripcion, fecha) values('Aenean laoreet feugiat nunc vel rutrum.', getdate()) insert into test(descripcion, fecha) values('Nam at tellus erat. In ante elit, imperdiet sit amet eleifend vitae, fermentum a urna.', getdate()) insert into test(descripcion, fecha) values('Phasellus pellentesque placerat pellentesque.', getdate()) insert into test(descripcion, fecha) values('Sed et sapien dignissim, lacinia arcu ac, suscipit elit.', getdate()) insert into test(descripcion, fecha) values('Fusce ullamcorper mi ut lorem cursus, sed euismod nunc auctor. ', getdate()) insert into test(descripcion, fecha) values('Mauris id massa eget ligula efficitur pellentesque.', getdate()) GO CREATE PROC USP_Test_List AS BEGIN SELECT * FROM test END GO CREATE PROC USP_Test_ListById (@id int) AS BEGIN SELECT * FROM test where id = @id END  Paso 1: Archivo de configuración Empezaremos creando un archivo al cual nombraremos como config.js, en este archivo se encontrará la cadena de conexión.\nconst config = { connectionSQL: \u0026quot;Data Source=[server];Initial Catalog=[database];Persist Security Info=True;User ID=[user];Password=[pass];\u0026quot; } module.exports = config;  Paso 2: Conexión y operaciones Creamos un nuevo archivo al cual nombraremos como sql.js, en este archivo crearemos la conexión y las operaciones básicas (select, exec store-procedure).\n\u0026quot;use strict\u0026quot;; const mssql = require('mssql'); module.exports = class Sql { constructor(stringConnection) { this.stringConnection = stringConnection; } connect() { mssql.on('error', err =\u0026gt; { console.log(err); mssql.close(); }); return mssql.connect(this.stringConnection); } close() { return mssql.close(); } async select(table) { return new Promise((resolve, reject) =\u0026gt; { this.connect().then(pool =\u0026gt; { return pool.request().query(`select * from ${table}`); }).then(result =\u0026gt; { mssql.close(); resolve(result); }).catch(err =\u0026gt; { reject(err); }); }); } async selectById(table, id) { if (id == undefined || id === 0) { return await this.select(table); } else { return new Promise((resolve, reject) =\u0026gt; { this.connect().then(pool =\u0026gt; { return pool.request().query(`select * from ${table} where id=${id}`); }).then(result =\u0026gt; { mssql.close(); resolve(result); }).catch(err =\u0026gt; { reject(err); }); }); } } async execStoreProcedure(storeProcedure){ return new Promise((resolve, reject) =\u0026gt; { this.connect().then(pool =\u0026gt; { return pool.request().execute(storeProcedure); }).then(result =\u0026gt; { mssql.close(); resolve(result); }).catch(err =\u0026gt; { reject(err); }); }); } async execStoreProcedureById(storeProcedure, parameter){ return new Promise((resolve, reject) =\u0026gt; { this.connect().then(pool =\u0026gt; { return pool.request() .input(\u0026quot;id\u0026quot;, mssql.Int, parameter) .execute(storeProcedure); }).then(result =\u0026gt; { mssql.close(); resolve(result); }).catch(err =\u0026gt; { reject(err); }); }); } }  Paso 3: Ejecuciones Para ejecutar crearemos una funcion asincrona autoejecutable de la siguiente manera:\n\u0026quot;use strict\u0026quot;; const config = require(\u0026quot;./config\u0026quot;); const sqlConnection = require(\u0026quot;./sql\u0026quot;); const sql = new sqlConnection(config.connectionSQL); (async () =\u0026gt; { try { let select = await sql.select(\u0026quot;test\u0026quot;); console.log(select.recordset); } catch (error) { sql.close(); console.log(error); } })();  Ejecución de store procedure.\n\u0026quot;use strict\u0026quot;; const config = require(\u0026quot;./config\u0026quot;); const sqlConnection = require(\u0026quot;./sql\u0026quot;); const sql = new sqlConnection(config.connectionSQL); (async () =\u0026gt; { try { let select = await sql.execStoreProcedureById(\u0026quot;USP_Test_ListById\u0026quot;, 1); console.log(select.recordset); } catch (error) { sql.close(); console.log(error); } })();   Para verlo en acción solo debemos de ejecutar lo siguiente en la consola: node [nombre-archivo].js El retorno siempre es en formato JSON   Para obtener el código completo dar click aquí\nComenta, disfruta y comparte!  ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2019-01-10-nodejs-sqlserver/","tags":["JS","SQLSERVER","JavaScript"],"title":"Conexión NodeJS con SQLServer"},{"categories":["Tutoriales"],"contents":"  En esta oportunidad crearemos un juego del clásico piedra, papel o tijeras. Utilizaremos JavaScript puro y HTML5 y CSS3 para el diseño.\n \u0026#128512; Click aquí para ver la Demo \u0026#129299; Recursos (Imagenes)  Puño Mano Tijera  Paso 1 (Estructura del diseño) Empezaremos creando el archivo index.html y codificamos lo siguiente:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;es\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;css/style.css\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Rock Paper Scissors Game\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Rock Paper Scissors\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026quot;score-board\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;user-label\u0026quot; class=\u0026quot;badge\u0026quot;\u0026gt;user\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;computer-label\u0026quot; class=\u0026quot;badge\u0026quot;\u0026gt;comp\u0026lt;/div\u0026gt; \u0026lt;span id=\u0026quot;user-score\u0026quot;\u0026gt;0\u0026lt;/span\u0026gt;\u0026amp;nbsp;:\u0026amp;nbsp;\u0026lt;span id=\u0026quot;computer-score\u0026quot;\u0026gt;0\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;result\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Paper covers rock. You win!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;choices\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;choice\u0026quot; id=\u0026quot;r\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;images/rock.png\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;choice\u0026quot; id=\u0026quot;p\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;images/paper.png\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;choice\u0026quot; id=\u0026quot;s\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;images/scissors.png\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p id=\u0026quot;action-message\u0026quot;\u0026gt;Make your move\u0026lt;/p\u0026gt; \u0026lt;script src=\u0026quot;js/util.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;js/game.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;js/app.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Paso 2 (Estilos) Crearemos una carpeta \u0026ldquo;css\u0026rdquo; para llevar un orden y no tener los archivos sueltos. Dentro de la carpeta agregar un archivo style.css y codificar lo siguiente:\n@import url('https://fonts.googleapis.com/css?family=Asap:400,500,700'); * { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: #292C34; } header { background: white; padding: 20px; } header\u0026gt;h1 { color: #25272E; text-align: center; font-family: Asap, sans-serif; } .score-board { margin: 20px auto; border: 3px solid white; border-radius: 4px; text-align: center; width: 200px; color: white; font-size: 46px; padding: 15px 20px; font-family: Asap, sans-serif; position: relative; } .badge { background-color: #E2584D; color: white; font-size: 14px; padding: 2px 10px; font-family: Asap, sans-serif; } #user-label { position: absolute; top:30px; left: -25px; } #computer-label{ position: absolute; top: 30px; right: -25px; } .result{ font-size: 40px; color: white; } .result \u0026gt; p{ text-align: center; font-weight: bold; font-family: Asap, sans-serif; } .choices{ margin-top: 50px; text-align: center; } .choice{ border: 4px solid white; border-radius: 50%; margin: 0 20px; padding: 10px; display: inline-block; transition: all 0.3 ease; width: 100px; } .choice:hover{ cursor: pointer; background: #24272E; } #action-message{ text-align: center; color: white; font-family: Asap, sans-serif; font-weight: bold; font-size: 20px; margin-top: 20px; } img{ width: 80%; } .green-glow{ border: 4px solid #4dcc7d !important; box-shadow: 0 0 10px #31b43a; } .red-glow{ border: 4px solid #fc121b !important; box-shadow: 0 0 10px #d01115; } .gray-glow{ border: 4px solid #ff8000 !important; box-shadow: 0 0 10px #ff8000 ; }  Paso 3 (funcionalidad) Luego, agregamos una carpeta a la cual llamaremos \u0026ldquo;js\u0026rdquo; que es en donde se crearán los archivos javaScript, el primer archivo que crearemos sera `utils.js\u0026rdquo;. En este archivo estarán todos los recursos que reutilizaremos.\n\u0026quot;use strict\u0026quot;; class Utils { getElement(value) { return document.getElementById(value); } getQuerySelector(value) { return document.querySelector(value); } getComputerChoice() { const choices = [\u0026quot;r\u0026quot;, \u0026quot;p\u0026quot;, \u0026quot;s\u0026quot;]; const randonNumber = Math.floor(Math.random() * 3); return choices[randonNumber]; } convertToWord(letter) { if (letter === \u0026quot;r\u0026quot;) return \u0026quot;Rock\u0026quot;; if (letter === \u0026quot;p\u0026quot;) return \u0026quot;Paper\u0026quot;; return \u0026quot;Scissors\u0026quot; } addClassEffect(choice, _class) { const etiq = this.getElement(choice); etiq.classList.add(_class); setTimeout(() =\u0026gt; { etiq.classList.remove(_class); }, 300); } }  Agregar archivo game.js, aquí estará la funcionalidad general del juego.\n\u0026quot;use strict\u0026quot; const utils = new Utils(); class Game { constructor(userScore_span, computerScore_span, result_p) { this.scoreWin = 0; this.scoreLose = 0; this.userScore_span = utils.getElement(userScore_span); this.computerScore_span = utils.getElement(computerScore_span); this.result_p = utils.getQuerySelector(result_p); } main(userChoice) { const computerChoices = utils.getComputerChoice(); switch (userChoice + computerChoices) { case \u0026quot;rs\u0026quot;: case \u0026quot;pr\u0026quot;: case \u0026quot;sp\u0026quot;: this.win(userChoice, computerChoices); break; case \u0026quot;rp\u0026quot;: case \u0026quot;ps\u0026quot;: case \u0026quot;sr\u0026quot;: this.lose(userChoice, computerChoices); break; case \u0026quot;rr\u0026quot;: case \u0026quot;pp\u0026quot;: case \u0026quot;ss\u0026quot;: this.draw(userChoice, computerChoices); break; } } win(userChoice, computerChoice) { this.scoreWin++; const text = `${utils.convertToWord(userChoice)} wins ${utils.convertToWord(computerChoice)}\u0026lt;br\u0026gt;You win! :)`; this.paint(userChoice, \u0026quot;green-glow\u0026quot;, text); } lose(userChoice, computerChoice) { this.scoreLose++; const text = `${utils.convertToWord(userChoice)} loses to ${utils.convertToWord(computerChoice)}\u0026lt;br\u0026gt;You lost! :(`; this.paint(userChoice, \u0026quot;red-glow\u0026quot;, text); } draw(userChoice, computerChoice) { const text = `${utils.convertToWord(userChoice)} equals ${utils.convertToWord(computerChoice)}\u0026lt;br\u0026gt;It´s a draw!`; this.paint(userChoice, \u0026quot;gray-glow\u0026quot;, text); } paint(userChoice, _class, text) { this.userScore_span.innerHTML = this.scoreWin; this.computerScore_span.innerHTML = this.scoreLose; this.result_p.innerHTML = text; utils.addClassEffect(userChoice, _class); } }  Y para terminar, agregaremos un archivo app.js, aquí crearemos un funcion autoejecutable:\n\u0026quot;use strict\u0026quot;; const userScore_span = \u0026quot;user-score\u0026quot;; const computerScore_span = \u0026quot;computer-score\u0026quot;; const result_p = \u0026quot;.result \u0026gt; p\u0026quot;; const game = new Game(userScore_span, computerScore_span, result_p); (() =\u0026gt; { document.getElementById(\u0026quot;r\u0026quot;).addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; { game.main(\u0026quot;r\u0026quot;); }); document.getElementById(\u0026quot;p\u0026quot;).addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; { game.main(\u0026quot;p\u0026quot;); }); document.getElementById(\u0026quot;s\u0026quot;).addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; { game.main(\u0026quot;s\u0026quot;); }); })();  Para probar el resultado final, no esta de más decir que solo hay que dar doble click a index.html y listo!\nCreditos  whatsdev (YouTube)   Para obtener el código completo dar click aquí.\n Para finalizar les dejo este pensamiento corto: \u0026gt; Cada día trae nuevas opciones (Martha Beck).\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-12-15-game-rock-paper-scissors/","tags":["JS"],"title":"Creación de un juego con JavaScript puro"},{"categories":["Tutoriales"],"contents":"  Redis se utiliza como base de datos y para caché, ya que es súper rápido debido a que los datos se almacenan \u0026ldquo;en memoria\u0026rdquo;, a diferencia de otras bases de datos en las que los datos generalmente se almacenan \u0026ldquo;en disco\u0026rdquo;.\n Redis es una gran base de datos para usar con Node.js. Tanto Redis como Node.js comparten convenciones de tipo y modelos de subprocesos similares, lo que lo convierte en una experiencia de desarrollo muy predecible. Al asociar Node.js y Redis, puede lograr una plataforma de desarrollo escalable y productiva.\nRequisitos  NodeJS (https://nodejs.org/es/) Redis (https://redis.io/) NPM (https://www.npmjs.com/)  Instalación de Redis en windows Para obtener Redis da click al siguiente enlace: https://github.com/dmajkic/redis/downloads\nCreando el Package.json Antes de proceder con cualquier instalación de paquetes npm necesitamos crear nuestro package.json.\n Como primer paso creamos una carpeta donde estarán todos nuestros archivos. Luego, levantar la ventana de comandos dentro de la carpeta y ejecutar el siguiente comando npm init. Podemos personalizar o simplemente precionar la tecla enter hasta terminar.  Al finalizar tendremos un archivo como este:\n{ \u0026quot;name\u0026quot;: \u0026quot;[nombre]\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;[versión]\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;[descripción]\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot; }, \u0026quot;author\u0026quot;: \u0026quot;Hugo Roca - hugo.rock20@hotmail.com\u0026quot;, \u0026quot;license\u0026quot;: \u0026quot;[licencia]\u0026quot; }  Instalando npm Redis Para este caso utilizaremos al paquete IORedis (https://www.npmjs.com/package/ioredis), en la consola de comandos copiamos y pegamos lo siquiente: npm i ioredis, una ves terminado se creará una carpeta por defecto node_modules, en donde se guardan todas las dependencias.\nCreando la conexión (get, set) Empezaremos creando un archivo de configuración (config.js) en donde estará las credenciales y otras cosas:\nconst config = { redis: { port: 6379, host: \u0026quot;localhost\u0026quot;, retries: 3, time_to_retry: 100, time_live: 3600 // tiempo de vida en segundos } } module.exports = config;  Luego, empezamos a crear la conexión, para esta ocación haremos uso de ES6, el nuevo archivo tendra el nombre de \u0026ldquo;redis-connection.js\u0026rdquo;, adicional a esto agregaremos dos métodos más que serían asincronos, uno para obtener y el otro para asignar.\n\u0026quot;use strict\u0026quot;; const redis = require(\u0026quot;ioredis\u0026quot;); const config = require(\u0026quot;./config\u0026quot;); module.exports = class RedisConnection { constructor() { this.client = this.connect(); } connect() { let client = new redis({ host: config.redis.host, port: config.redis.port, retryStrategy(times){ let delay = Math.min(times * config.redis.time_to_retry, 200); return delay; }, maxRetriesPerRequest: config.redis.retries }); client.on(\u0026quot;connect\u0026quot;, () =\u0026gt; { console.log(\u0026quot;Connectado a redis\u0026quot;); }); client.on(\u0026quot;error\u0026quot;, err =\u0026gt; { console.log(`Redis error: ${err}`); }); return client; } async get(key){ return await this.client.get(key); } async set(key, value){ return await this.client.set(key, value); } }  Creamos el siguiente archivo \u0026ldquo;redisSet.js\u0026rdquo; en donde se codificará una función autoejecutala asincrona instanciando al objeto \u0026ldquo;redis-connection.js\u0026rdquo;.\n\u0026quot;use strict\u0026quot;; const redisConnection = require(\u0026quot;./redis-connection\u0026quot;); const redis = new redisConnection(); (async () =\u0026gt; { try { // Para este caso haremos uso de un JSON, tambien se puede guardar string, int, double, etc. let data = [{ \u0026quot;_id\u0026quot;: \u0026quot;5c21d04d34b4a04750f9aa6f\u0026quot;, \u0026quot;index\u0026quot;: 0, \u0026quot;guid\u0026quot;: \u0026quot;c9f32788-0116-48e9-86d5-9c7649f70c58\u0026quot;, \u0026quot;friends\u0026quot;: [{ \u0026quot;id\u0026quot;: 0, \u0026quot;name\u0026quot;: \u0026quot;Tania Cardenas\u0026quot; }, { \u0026quot;id\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;Cherry Bishop\u0026quot; }, { \u0026quot;id\u0026quot;: 2, \u0026quot;name\u0026quot;: \u0026quot;Simpson French\u0026quot; } ] }, { \u0026quot;_id\u0026quot;: \u0026quot;5c21d04db527f89279d44902\u0026quot;, \u0026quot;index\u0026quot;: 1, \u0026quot;guid\u0026quot;: \u0026quot;144ef286-f059-4a62-98ca-b54c5130a4d7\u0026quot;, \u0026quot;friends\u0026quot;: [{ \u0026quot;id\u0026quot;: 0, \u0026quot;name\u0026quot;: \u0026quot;Vaughn Ratliff\u0026quot; }, { \u0026quot;id\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;Delores Glover\u0026quot; }, { \u0026quot;id\u0026quot;: 2, \u0026quot;name\u0026quot;: \u0026quot;Jayne Puckett\u0026quot; } ] } ]; // NOTA: cuando lo que se quiere registrar es un json o array, debemos de usar el JSON.strinify await redis.set(\u0026quot;dataPrueba\u0026quot;, JSON.stringify(data)); } catch (error) { console.log(`Error al procesar: ${error}`); } })();  Hacemos lo mismo que el código de arriba, pero esta vez vamos a obtener lo registrado. Este nuevo archivo tendrá de nombre \u0026ldquo;redisGet.js\u0026rdquo;.\n\u0026quot;use strict\u0026quot;; const redisConnection = require(\u0026quot;./redis-connection\u0026quot;); const redis = new redisConnection(); (async () =\u0026gt; { try { let rr = await redis.get(\u0026quot;dataPrueba\u0026quot;); console.log(rr); } catch (error) { console.log(`Error al procesar: ${error}`); } })();  Ejecutando lo codificado  Para ejecutar solo hay que tener levantado el Redis. Ejecutar la siguiente línea node redisSet.js en la consola  Esto registrará en redis el JSON.  Para obtener lo registrado ejecutar la siguiente línea node redisGet.js  Esto retornará el JSON registrado pero en formato STRING, simplemente formateamos a json(JSON.parse()) y listo!    Para obtener el código completo dar click aquí\n Para finalizar les dejo este pensamiento corto: \u0026gt; La verdadera oportunidad hacia el éxito reside en la persona, no en el puesto de trabajo (Zig Ziglar).\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-11-01-nodejs-redis/","tags":["JS","REDIS"],"title":"Conexión NodeJS con Redis Cache"},{"categories":["Tutoriales"],"contents":" D3.js es una biblioteca de JavaScript para manipular documentos basados ​​en datos. D3 te ayuda a dar vida a los datos usando HTML, SVG y CSS.\n El énfasis de D3 en los estándares web le brinda todas las capacidades de los navegadores modernos sin vincularse a un marco propietario, combinando poderosos componentes de visualización y un enfoque basado en datos para la manipulación de DOM.\nTe dejo algunos ejemplos en GITHUB de como empezar a desarrollar gráficos con datos reales.\nCódigo fuente: D3js\nPara finalizar les dejo este pensamiento corto: \u0026gt; Puedes hacerlo, deberías hacerlo, y si eres lo suficientemente valiente como para empezar, lo harás (Stephen King).\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-10-02-d3js/","tags":["JS","CSS3"],"title":"Gráficos con D3JS"},{"categories":null,"contents":"  POO es un paradigna de programación que comenzó a desarrollarse en los años 80, en ese momento se dieron cuenta que esta forma de programación facilitaba el desarrollo de sistemas de gran tamaño. De hecho actualmente este paradigma de programación es el más utilizado, los grandes sistemas que conocemos han sido desarrollados en base a este paradigma.\n Las ventajas de poo Es reutilizable, esto quiero decir que si desarrollamos nuestro código de forma adecuada, las clases y lo que creemos se puede reutilizar, en distintas partes del programa la cual nos va a permitir no duplicar código. Mantenibilidad, un sistema orientado a objetos va ser mucho mas fácil de leer y comprender para los programadores, ya que para ellos no vas ser necesario adentrarse demasiado al código, basta con ver las clases generales para darse cuenta como funciona . Modificable, si nuestro código esta bien implementado va ser muy fácil añadir, modificar o incluso eliminar las clases u objetos que ya existan en el código. Un sistema orientado a objetos también es fiable, es mas fácil detectar errores en este tipo de programas, podemos dividir el sistema en partes e ir las probando de manera independiente\nCaracterística principales  Abstracción Encapsulamiento Herencia Polimorfismo  Para poder desarrollar aplicaciones orientas a objetos de la mejor manera, debemos analizar y entender cada uno de estos conceptos.\nLa abstracción Es un pilar o característica de la programación orienta a objetos, que va permitir que los objetos puedan interactuar sin necesidad de conocer los detalles del funcionamiento, de esta forma el enfoque se centra en aspectos relevantes de las entidades, podemos decir de hecho que estos aspectos son relativos ya que van a depender del enfoque en que se analice. Para entender el concepto vamos a modelar una escuela. Una escuela puede tener muchas características, pero con la abstracciones me voy a centar o enfocar únicamente en las características que yo necesito, para ellos debo de pensar de que como quiero modelar la escuela, lo puedo modelas desde el punto de vista administrativo, por ejemplo:\n Control de alumnos Control de empleados Control de asignaturas  Este seria el caso de un sistema de administración para escuela, también podemos enfocarnos de otra forma en las escuelas; podría ser que yo quisiera un sistema para una constructora, en este caso puedo ver el enfoque de la escuela es muy diferente; a una constructora le van a interesar las características de la escuela las cuales pueden ser, ventanas, puertas, pisos entre otras aspectos. Como podemos ver una misma entidad puede analizarse desde varias puntos de vista o enfoque, ademas de acuerdo de este enfoque se van a definir las características o comportamientos.\nLa abstraccion tambien nos va a permitir eliminar todos aquellos aspectos que forman parte del objeto o entidad pero que no son significatios para el caso que estamos analizando.\nEncapsulamiento Esta es una de las características más fáciles de entender de la programación orientada a objetos ya que la vamos a poder apreciar a simple vista en nuestro código, el encapsulamiento nos va a permitir empaquetar en un mismo contenedor o plantilla tanto las características de las entidades u objetos como sus comportamientos.\nSi has desarrollado con otros paradigmas de programación como la ‘programación estructurada’, podrás recordar que los datos y los módulos estaban separados, en cambio en la programación orientada a objetos estas características y atributos o comportamientos se van a mantener empaquetados en una misma plantilla.\nEl encapsulamiento también va a permitir establecer niveles de acceso, de esta forma podemos indicar la manera en que los objetos van a poder interactuar entre si.\nSi continuamos con el ejemplo de la escuela o el sistema administrativo para la escuela, podríamos tener la clase empleado y un comportamiento que calcule el pago, suponiendo que no queremos que otro elemento conozca el detalle de esta calculo, podríamos entonces ocultarlo y de esta forma estaríamos marcando su nivel de acceso\nHerencia La herencia es otro pilar de la programación orientada a objetos que vamos a entender fácilmente, ya que la herencia en sí es parte de la naturaleza humana.\nEn un sistema, la herencia va ayudarnos a clasificar los elementos y su vez nos va a permitir reutilizar el código, regularmente en un sistema vamos a encontrar que sus elementos pueden ser organizados de manera jerárquica, de tal forma que las clases o elementos de nivel superior pueda compartir sus características y acciones con las entidades de nivel superior.\nSi pensamos en los empleados para el sistema que hemos planteado para la administración de una escuela, estos empleados pueden clasificarse en profesor, director y secretaria por ejemplo.\nPodríamos entonces definir estas clases como derivadas de la clase empleado, de esta forma estaríamos aplicando la herencia y las clases derivadas profesor, director y secretaria estarán heredando las características y comportamientos de la clase empleado.\nPodemos analizarlo de la siguiente forma, un empleado puede ser un profesor, un director o una secretaria, cabe mencionar que un sistema puede tener \u0026lsquo;n\u0026rsquo; niveles de herencia, en nuestro sistema podríamos pensar por ejemplo en una clasificación adicional para el profesor, para ellos podríamos añadir las clases tiempo_completo y por_horas, estas clases serian entonces derivadas de la clase profesor.\nEs así como la herencia nos ha ayudado hacer una estructura jerárquica que nos va servir para desarrollar nuestro sistema.\nEl ultimo nivel jerárquico en este caso tiempo_completo y por_horas van a adquirir las características de todas las clases de las cuales heredan, es decir que tiempo_completo va adquirir las características y comportamiento tanto de la clase profesor como de la clase empleado, las clases director, profesor y secretaría son clases derivadas únicamente de la clase empleado por la tanto solo van a adquirir las características y comportamientos de esta clase.\nPolimorfismo Es la característica de la programación orientada a objetos que va a permitir que un objeto presente diferentes comportamientos de acuerdo al contexto en el que se encuentre.\nExisten diversas formas de implementar el polimorfismo, la implementación que podemos encontrar más comúnmente en un sistema es la que permite definir un comportamiento para que una clase que a su vez va ser heredado a sus clases derivadas y cada una de ellas va poder adaptar este comportamiento e implementarlo de acuerdo a sus necesidades.\nRetomando el ejemplo que aviamos planteado de la escuela, vamos a suponer que quiero definir un comportamiento para los empleado, yo se todos los empleados van a tener que recibir un pago, para ello voy a utilizar el comportamiento o método CalcularPago, el problema en este caso que vamos a encontrar es que no todos los empleado van a recibir un mismo pago y su pago no se va a calcular de la misma forma, es entonces que mediante el poliformismo voy a permitir que el método CalcularPago sea implementado por cada clase dependiendo de sus necesidades.\nPor ejemplo para la clase profesor de tiempo completo haría que el calculo de pago sea de acuerdo a sus prestaciones y a su quincena, en cambio para un profesor por hora implementaría el método CalcularPago de acuerdo a las horas que a trabajado durante el mes. También la clase director va heredar el método o comportamiento de la clase empleado y la clase derivada secretaria también lo va hacer, cada una de estas clases va implementar el comportamiento de acuerdo a sus necesidades.\nPara finalizar les dejo este pensamiento corto: \u0026gt; No es lo que te llamen, es aquello que respondes (W. C. Fields)\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-09-15-poo/","tags":["POO"],"title":"Programación Orientada a Objetos"},{"categories":["Sistemas"],"contents":"  En esta oportunidad les presento un nuevo sistema de restaurante, cuenta con dos formas de ver, una para los pedidos que se configura dentro del sistema y la otra la parte administrativa.\n Contenido  Registro del menú del día Registro de empleados Control de acceso de usuario Cobranza Genera PDF del Cobro Registro de imagenes Vista rápida en dashboard  Paso 1 Puedes obtener el codigo fuente de la siguiente forma:\n Descargar el repositorio APPRESTAURANTE Abrir Visual Studio Buscar la solución y abrir Tambien puedes hacer \u0026lsquo;FORK\u0026rsquo; y abrirlo directo de GitHub  Paso 2 Ejecutar el script de base de datos DataBase/APPRestaurente.sql en SQLServer.\nPaso 3 Configurar el archivo App/Portafolio.Web/Web.config\n\u0026lt;!-- Si tienes configurado el sqlserver con windows autentication solo debes de cambiar el data source por =\u0026gt; \u0026quot;.\u0026quot;; En caso que tenga un usuario y contraseña solamente agregarlo --\u0026gt; \u0026lt;connectionStrings\u0026gt; \u0026lt;add name=\u0026quot;PortafolioContext\u0026quot; connectionString=\u0026quot; data source=HUGOROCA; initial catalog=portafolio; integrated security=True; MultipleActiveResultSets=True; App=EntityFramework\u0026quot; providerName=\u0026quot;System.Data.SqlClient\u0026quot; /\u0026gt; \u0026lt;/connectionStrings\u0026gt;  Paso 4 Ejecutar el proyecto, para acceder al administrador solamente debes de agregar a la URL \u0026ldquo;/Admin\u0026rdquo;\nEjemplo: http://localhost:666/admin  Para finalizar, les dejo este pensamiento corto: \u0026gt; Escribe en tu corazón que cada día es el mejor día del año (Ralph Waldo Emerson).\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-09-01-apprestaurante/","tags":["SQLSERVER","CSharp","JS","JQUERY"],"title":"APP Restaurante"},{"categories":["Base De Datos"],"contents":"  Si eres un gran desarrollador sabrás que todo software debe de tener un LOG, en esta oportunidad te muestro un aplicativo de como se hace uno.\n Paso 1 Crear un proyecto de consola en visual studio\nPaso 2 Agregar el siguiente paguete nuget:\nPM\u0026gt; Install-Package log4net  Paso 3 Agregar una clase a la cual llamaremos LogHelper.cs\nnamespace Log4Net { public class LogHelper { public static log4net.ILog GetLogger([CallerFilePath]string filename = \u0026quot;\u0026quot;) { return log4net.LogManager.GetLogger(filename); } } }  Paso 4 Para configurar el archivo .txt en donde se registrarán los errores, configuramos lo siguiente en el app.config\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot; ?\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;configSections\u0026gt; \u0026lt;section name=\u0026quot;log4net\u0026quot; type=\u0026quot;log4net.Config.Log4NetConfigurationSectionHandler, log4net\u0026quot; /\u0026gt; \u0026lt;/configSections\u0026gt; \u0026lt;log4net\u0026gt; \u0026lt;appender name=\u0026quot;RollingFileAppender\u0026quot; type=\u0026quot;log4net.Appender.RollingFileAppender\u0026quot;\u0026gt; \u0026lt;lockingModel type=\u0026quot;log4net.Appender.FileAppender+MinimalLock\u0026quot;/\u0026gt; \u0026lt;file value=\u0026quot;C:\\Logs\\\u0026quot; /\u0026gt; \u0026lt;datePattern value=\u0026quot;dd.MM.yyyy'.log'\u0026quot; /\u0026gt; \u0026lt;appendToFile value=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;rollingStyle value=\u0026quot;Composite\u0026quot; /\u0026gt; \u0026lt;maximumFileSize value=\u0026quot;10MB\u0026quot; /\u0026gt; \u0026lt;maxSizeRollBackups value=\u0026quot;5\u0026quot; /\u0026gt; \u0026lt;staticLogFileName value=\u0026quot;false\u0026quot; /\u0026gt; \u0026lt;layout type=\u0026quot;log4net.Layout.PatternLayout\u0026quot;\u0026gt; \u0026lt;conversionPattern value=\u0026quot;:::::::::::::::::::::::::::::::::::::::: %newlineFecha: %date{MMMM dd, yyyy HH:mm:ss, fff} %newlineRuta: %location %newlineLinea: %line %newlineMetodo: %method %newlineTipo: %level %newlineMensaje: %message% newline%exception %newline::::::::::::::::::::::::::::::::::::::::\u0026quot; /\u0026gt; \u0026lt;/layout\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;root\u0026gt; \u0026lt;level value=\u0026quot;DEBUG\u0026quot; /\u0026gt; \u0026lt;appender-ref ref=\u0026quot;ConsoleAppender\u0026quot; /\u0026gt; \u0026lt;appender-ref ref=\u0026quot;RollingFileAppender\u0026quot; /\u0026gt; \u0026lt;/root\u0026gt; \u0026lt;/log4net\u0026gt; \u0026lt;startup\u0026gt; \u0026lt;supportedRuntime version=\u0026quot;v4.0\u0026quot; sku=\u0026quot;.NETFramework,Version=v4.6\u0026quot; /\u0026gt; \u0026lt;/startup\u0026gt; \u0026lt;/configuration\u0026gt;  Paso 5 Nos situamos en el archivo program.cs y hacemos siguiente:\n[assembly: log4net.Config.XmlConfigurator(Watch = true)] namespace Log4Net { class Program { private static readonly log4net.ILog log = LogHelper.GetLogger(); static void Main(string[] args) { divide(); Console.ReadLine(); void divide() { try { var i = 0; var a = 5 / i; } catch (DivideByZeroException ex) { log.Error(\u0026quot;división entro 0\u0026quot;, ex); } } } } }  Ejecutamos y comprobamos el error registrado, como lo configuramos en el paso 4 \u0026lt;file value=\u0026quot;C:\\Logs\\\u0026quot; /\u0026gt;, buscamos la ruta y vemos el error.\nPara terminar En este repo, existe ejemplos de como registrar los errores en base de datos\n Descargar el respositorio Log4Net Abrir la solución y explorar el código fuente  Para finalizar les dejo este pensamiento corto:\n Si miras en dirección al sol no verás las sombras (Hellen Keller).\n ","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-05-20-log4net/","tags":["SQLSERVER","CSharp"],"title":"Registro de errores con Log4Net"},{"categories":["Base de datos"],"contents":"  Una forma mas rápida de realizar CRUD\u0026rsquo;s, a tan solo unos clicks. Este es el poderosisimo Entity Framework\n Paso 1 Puedes obtener el codigo fuente de la siguiente forma:\n Descargar el repositorio ENTITY-FRAMEWORK-BASICO Abrir la solución y explorar el código fuente  Paso 2 Ejecutar lo siguiente en SQLServer\nCREATE DATABASE Test GO USE Test GO CREATE TABLE [dbo].[Alumno]( [id] [int] IDENTITY(1,1) NOT NULL, [Nombre] [varchar](50) NOT NULL, [Apellido] [varchar](100) NOT NULL, [Sexo] [int] NOT NULL, [FechaNacimiento] [varchar](10) NOT NULL primary key (id)) GO  Paso 3 Una vez ejecutado el script, abrir el archivo App.config y cambiar las siguientes lineas:\n\u0026lt;connectionStrings\u0026gt; \u0026lt;add name=\u0026quot;TestContext\u0026quot; connectionString=\u0026quot; data source=.; initial catalog=Test; user id=sa; =\u0026gt; 'cambiar por tu usuario o en caso no tengas, quitar' password=1234; =\u0026gt; 'cambiar por tu usuario o en caso no tengas, quitar' MultipleActiveResultSets=True; App=EntityFramework\u0026quot; providerName=\u0026quot;System.Data.SqlClient\u0026quot; /\u0026gt; \u0026lt;/connectionStrings\u0026gt;  Paso 4 Ejecutar y puedes comenzar a realizar registros\u0026hellip; Comenta, disfruta y comparte!\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-05-06-entityframework-basico/","tags":["SQLSERVER","CSharp"],"title":"Entity Framework Básico"},{"categories":["Base de datos"],"contents":" Les comparto algunos scripts que me sirvieron de mucho durante el tiempo que llevo trabajando, y es más aún los sigo usando.\nSplit -- select * from dbo.[Split]('1,2,3,4,5,6',',') CREATE FUNCTION [dbo].[Split] ( @ItemList NVARCHAR(MAX) ,@delimiter CHAR(1) ) RETURNS @IDTable TABLE ( nro INT identity(1, 1) ,Item VARCHAR(MAX) ) AS BEGIN DECLARE @tempItemList NVARCHAR(MAX) SET @tempItemList = @ItemList DECLARE @i INT DECLARE @Item NVARCHAR(MAX) SET @i = CHARINDEX(@delimiter, @tempItemList) WHILE (LEN(@tempItemList) \u0026gt; 0) BEGIN IF @i = 0 SET @Item = @tempItemList ELSE SET @Item = LEFT(@tempItemList, @i - 1) INSERT INTO @IDTable (Item) VALUES (@Item) IF @i = 0 SET @tempItemList = '' ELSE SET @tempItemList = RIGHT(@tempItemList, LEN(@tempItemList) - @i) SET @i = CHARINDEX(@delimiter, @tempItemList) END RETURN END  Encriptación Recomendado para contraseñas y/o datos sensibles.\nCREATE FUNCTION dbo.EncriptarClave (@Clave NVARCHAR(MAX)) RETURNS NVARCHAR(MAX) AS BEGIN SET @Clave = UPPER(@Clave) DECLARE @ClaveEncriptada NVARCHAR(MAX); SELECT @ClaveEncriptada = UPPER( SUBSTRING(master.dbo.fn_varbintohexstr(HASHBYTES('SHA1', @Clave)), 3, 40) ); RETURN @ClaveEncriptada; END /*SELECT dbo.EncriptarClave('HUGO') Esto no es reversible, una vez encriptada ya no se puede desencriptar, se recomienda guardar log. */  Exists store, function, index IF EXISTS(SELECT * FROM sys.SYSOBJECTS A INNER JOIN SYS.SCHEMAS B ON A.uid =B.schema_id WHERE A.NAME='Gen_SelBandejaProducto_SP' AND B.name='dbo') DROP PROCEDURE Gen_SelBandejaProducto_SP GO -- para indeces IF EXISTS (SELECT * FROM sys.indexes WHERE name='Cedula_INDEX' AND object_id = OBJECT_ID('CertificadoTributarioDetalle')) BEGIN DROP INDEX Cedula_INDEX ON dbo.CertificadoTributarioDetalle; END  Formato miles select CONVERT(varchar(50), CONVERT(money, 12345.6), 1)  Try Catch BEGIN BEGIN TRY BEGIN TRANSACTION BEGIN \u0026lt;\u0026lt;Cuerpo de procedimiento\u0026gt;\u0026gt; END COMMIT TRAN END TRY BEGIN CATCH IF @@TRANCOUNT \u0026gt; 0 BEGIN ROLLBACK TRAN END DECLARE @nLinea INT=ERROR_LINE() DECLARE @cError VARCHAR(8000)=ERROR_MESSAGE() DECLARE @cStored varchar(500)=(SELECT TOP 1 name FROM sys.objects WHERE object_id=@@PROCID) EXEC SIS_RegitrarError @nLinea, @cError, @cStored END CATCH END /**************************/ CREATE PROCEDURE [dbo].[SIS_RegitrarError] @nLineaError INT ,@cDescrip VARCHAR(8000) ,@cNombreStore VARCHAR(500) AS BEGIN INSERT INTO Errores ( dFecha ,nLineaError ,cDescrip ,cDatos ,cStore ) VALUES ( GETDATE() ,@nLineaError ,@cDescrip ,CONVERT(VARCHAR(50), HOST_NAME() + ' - ' + SUSER_SNAME(SUSER_SID())) ,@cNombreStore ) END  Select XML DECLARE @oData XML = '\u0026lt;GENESYS\u0026gt;\u0026lt;DATA nombre=\u0026quot;Hugo\u0026quot; apellido=\u0026quot;Roca\u0026quot; /\u0026gt;\u0026lt;/GENESYS\u0026gt;' DECLARE @nDoc int EXEC sp_xml_preparedocument @nDoc OUTPUT,@oData SELECT *\tFROM openxml(@nDoc, '/GENESYS/DATA', 1) WITH ( nombre varchar(50), apellido varchar(50) )  Buscar tabla en store SELECT Name FROM sys.procedures WHERE OBJECT_DEFINITION(OBJECT_ID) LIKE '%table%' Go ------ SELECT DISTINCT so.name FROM syscomments sc INNER JOIN sysobjects so ON sc.id=so.id WHERE sc.TEXT LIKE '%table%' Go ----- Con tipo, si es store o function SELECT DISTINCT o.name, o.xtype FROM syscomments c INNER JOIN sysobjects o ON c.id=o.id WHERE c.TEXT LIKE '%SolicitudCredito%' go  Ceros a la izquierda select RIGHT('0000000000' + Ltrim(Rtrim('987654')),10)  Enviar correo CREATE PROCEDURE [dbo].[PA_EnviarCorreoDBA] @pcTo AS VARCHAR(255) ,@pcCC AS VARCHAR(255) ,@pcSubject AS VARCHAR(255) ,@pcMessage AS VARCHAR(max) AS BEGIN EXEC msdb..sp_send_dbmail @profile_name = 'Database Management' ,@recipients = @pcTo ,@copy_recipients = @pcCC ,@subject = @pcSubject ,@body = @pcMessage END  Config de parametros CREATE PROCEDURE dbo.SCC_Configurar_Parametros AS --ACTIVAR VOLCADO DE DATOS A ARCHIVOS PLANOS EXEC sp_configure 'show advanced options',1; -- To update the currently configured value for advanced options. RECONFIGURE WITH OVERRIDE; -- To enable the feature. EXEC sp_configure 'xp_cmdshell',1; -- To update the currently configured value for this feature. RECONFIGURE WITH OVERRIDE; /************************/ CREATE PROCEDURE dbo.SCC_Configurar_Parametros_Cerrar AS -- To enable the feature. EXEC sp_configure 'xp_cmdshell',0; -- To update the currently configured value for this feature. RECONFIGURE WITH OVERRIDE; --ACTIVAR VOLCADO DE DATOS A ARCHIVOS PLANOS EXEC sp_configure 'show advanced options',0; -- To update the currently configured value for advanced options. RECONFIGURE WITH OVERRIDE;  Comenta, disfruta y comparte!\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-04-29-scripts-sqlserver/","tags":["SqlServer"],"title":"Scripts SQLServer"},{"categories":["Sistemas"],"contents":" ¿Alguna véz haz querido hacer un curriculum profesional usando algo diferente? En esta ocación te traigo el siguiente sistema.\nSistema de administración de portafolio desarrollado en C#, MVC5, Entity Framework, JQuery, Bootstrap. Esta formado en dos partes:\n Lo que se muestra al usuario final (Front) Parte administrable  Edición de datos Registro y edición de estudios Registro y eliminación de hablidades Registro y edición de experiencia Edición de testimonios   Paso 1 Debes de tener instalado visual studio y sqlsever.\nPuedes obtener el codigo fuente de la siguiente forma:\n Descargar el repositorio PORTAFOLIO PROFESIONAL Abrir Visual Studio Buscar la solución y abrir Tambien puedes hacer \u0026lsquo;FORK\u0026rsquo; y abrirlo directo de GitHub  Paso 2 Ejecutar el script de base de datos App/dataBase/base_de_datos.sql.sql en SQLServer.\nPaso 3 Configurar el archivo App/Portafolio.Web/Web.config\n\u0026lt;!-- Si tienes configurado el sqlserver con windows autentication solo debes de cambiar el data source por =\u0026gt; \u0026quot;.\u0026quot;; En caso que tenga un usuario y contraseña solamente agregarlo --\u0026gt; \u0026lt;connectionStrings\u0026gt; \u0026lt;add name=\u0026quot;PortafolioContext\u0026quot; connectionString=\u0026quot; data source=HUGOROCA; initial catalog=portafolio; integrated security=True; MultipleActiveResultSets=True; App=EntityFramework\u0026quot; providerName=\u0026quot;System.Data.SqlClient\u0026quot; /\u0026gt; \u0026lt;/connectionStrings\u0026gt;  Paso 4 Ejecutar el proyecto, para acceder al administrador solamente debes de agregar a la URL \u0026ldquo;/Admin\u0026rdquo;\nEjemplo: http://localhost:666/admin  Comenta, disfruta y comparte!\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-04-15-portafolio-profesional/","tags":null,"title":"Portafolio Profesional"},{"categories":["Sistemas"],"contents":" Como dicen, si hay versión 1, una 2 va haber, en esta oportunidad les muestro otro sistema de ventas mas completo en full PHP con jquery y ajax.\nSistema para el contol de ventas e ingreso de stock, impresion de facturas, boletas y tickets, control de usuarios y permisos. Desarrollado en PHP7, JQuery y la plantilla AdminLTE.\nCONTENIDO  Login Dashboard ▾ Almacen/ Registro de artículo Registro de categorías ▾ Compras/ Registro de Ingresos Registro de Proveedor ▾ Ventas/ Registro de Cliente Registro de Ventas ▾ Impresion en PDF/ Factura Boleta ticket ▾ Acceso/ Permisos Registro de usuario Consulta de Compras Consulta de Ventas  Paso 1 Puedes obtener el codigo fuente de la siguiente forma:\n Descargar el repositorio Sigeven 2.0 Copiarlo a un server WAMP, XAMPP o APACHE  Paso 2 Ejecutar el script de base de datos App/dataBase/dbsistema.sql en mysql.\nPaso 3 Configurar el archivo App/config/global.php\n\u0026lt;?php //ip de la pc del servidor de la base de datos define(\u0026quot;DB_HOST\u0026quot;, \u0026quot;localhost\u0026quot;); //Nombre de la base de datos define(\u0026quot;DB_NAME\u0026quot;, \u0026quot;dbsistena\u0026quot;); //Usuario de la base de datos define(\u0026quot;DB_USERNAME\u0026quot;,\u0026quot;root\u0026quot;); //Contraseña del usuario de la ase de datos define(\u0026quot;DB_PASSWORD\u0026quot;,\u0026quot;\u0026quot;); //Definimos la codificación de los caracteres define(\u0026quot;DB_ENCODE\u0026quot;,\u0026quot;utf8\u0026quot;); //Definimos una constante como nombre del proyecto define(\u0026quot;PRO_NOMBRE\u0026quot;,\u0026quot;ITVentas\u0026quot;); ?\u0026gt;  Paso 4 Ingresa a la ruta del servidor donde fue publicado\u0026hellip; Comenta, disfruta y comparte!\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-03-30-sigeven2.0/","tags":["HTML5","CSS3","JS","AngularJS","PHP"],"title":"SIGEVEN 2.0"},{"categories":["Sistemas"],"contents":" En esta oportunidad les presento un sistema de gestión de ventas para un puesto de ventas, podrás registrar ventas diarias, gastos, ingresos, registro de proveedores e incluso realizar reportes. Desarrollado en AngularJS, PHP y MySql, maquetado con bootstrap.\nPaso 1 Puedes obtener el codigo fuente de la siguiente forma:\n Descargar el repositorio Sigeven 1.0 Copiarlo a un server WAMP, XAMPP o APACHE  Árbol de archivos\n ▾ App/ ▾ private/ ▾ articulo/ articulo.controller.js articulo.html ▾ consultas/ consulta.controller.js consultaGasto.html consultaProveedor.html consultaventa.html ▾ gasto/ gasto.controller.js gasto.html ▾ otros/ otro.controller.js otro.html ▾ portal/ portal.controller.js portal.html ▾ proveedor/ proveedor.controller.js proveedor.html ▾ venta/ venta.controller.js venta.html ▾ shared/ authentication.service.js configuration.service.js data.service.js app.config.js app.controller.js app.js app.router.js login.controller.js ► Content ▾ Scripts/ ▾ flot-tooltip/ ▾ flot/ ▾ modules/ angular.js bootbox.js download.js jquery.mask.js log.js utils.js ▾ Server/ ▾ data/ articulo.php catalogoCodigo.php gasto.php proveedor.php usuario.php venta.php articulo_actualizar.php articulo_anular.php articulo_insert.php articulo_listaPorid.php articulo_top.php catalogoCodigo_insertar.php catalogoCodigo_lista.php connection.php dashboard_consulta.php gastoDetalle_consulta.php gasto_consulta.php gasto_insertar.php proveedor_insertar.php usuario-validate.php ventaDetalle_consulta.php venta_consulta.php venta_insertar.php venta_listaPorSemana.php README.md dbVentas.sql favicon.ico index.html login.html  Paso 2 Ejecutar el script de base de datos (dbVentas.sql) en mysql.\nPaso 3 Configurar el archivo Server/connection.php\n\u0026lt;?php define('HOST', 'localhost'); // =\u0026gt; host del server de la base de datos define('USER', 'root'); // =\u0026gt; usuario de la base de datos define('PASSWORD', ''); // =\u0026gt; password del usuario de base de datoa define('DATABASE', 'dbventas'); // =\u0026gt; nombre de base de datos function DB() { static $instance; if ($instance === null) { $opt = array( PDO::ATTR_ERRMODE =\u0026gt; PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE =\u0026gt; PDO::FETCH_ASSOC, PDO::ATTR_EMULATE_PREPARES =\u0026gt; FALSE, ); $dsn = 'mysql:host=' . HOST . ';dbname=' . DATABASE; $instance = new PDO($dsn, USER, PASSWORD, $opt); } return $instance; } ?\u0026gt;  Paso 4 Ingresa a la ruta del servidor donde fue publicado\u0026hellip; Comenta, disfruta y comparte!\n","permalink":"http://donprogramador.net.s3-website.us-east-2.amazonaws.com/blog/2018-03-04-sigeven1.0/","tags":["HTML5","CSS3","JS","AngularJS","PHP"],"title":"SIGEVEN 1.0"}]